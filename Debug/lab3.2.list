
lab3.2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ab0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002bbc  08002bbc  00012bbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002bdc  08002bdc  00020050  2**0
                  CONTENTS
  4 .ARM          00000000  08002bdc  08002bdc  00020050  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002bdc  08002bdc  00020050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002bdc  08002bdc  00012bdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002be0  08002be0  00012be0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000050  20000000  08002be4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  20000050  08002c34  00020050  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000100  08002c34  00020100  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009068  00000000  00000000  00020079  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001afc  00000000  00000000  000290e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a60  00000000  00000000  0002abe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000950  00000000  00000000  0002b640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016c96  00000000  00000000  0002bf90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ba6c  00000000  00000000  00042c26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082151  00000000  00000000  0004e692  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d07e3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002898  00000000  00000000  000d0838  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000050 	.word	0x20000050
 8000128:	00000000 	.word	0x00000000
 800012c:	08002ba4 	.word	0x08002ba4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000054 	.word	0x20000054
 8000148:	08002ba4 	.word	0x08002ba4

0800014c <readButton>:
int KeyReg3[KEY_SIZE] = {NORMAL_STATE};
int button_state[KEY_SIZE] = {0};

int TimerForKeyPress = 2000;

void readButton(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	button_state[0] = HAL_GPIO_ReadPin(SELECT_GPIO_Port, SELECT_Pin);
 8000150:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000154:	480d      	ldr	r0, [pc, #52]	; (800018c <readButton+0x40>)
 8000156:	f001 fce5 	bl	8001b24 <HAL_GPIO_ReadPin>
 800015a:	4603      	mov	r3, r0
 800015c:	461a      	mov	r2, r3
 800015e:	4b0c      	ldr	r3, [pc, #48]	; (8000190 <readButton+0x44>)
 8000160:	601a      	str	r2, [r3, #0]
	button_state[1] = HAL_GPIO_ReadPin(UP_GPIO_Port, UP_Pin);
 8000162:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000166:	4809      	ldr	r0, [pc, #36]	; (800018c <readButton+0x40>)
 8000168:	f001 fcdc 	bl	8001b24 <HAL_GPIO_ReadPin>
 800016c:	4603      	mov	r3, r0
 800016e:	461a      	mov	r2, r3
 8000170:	4b07      	ldr	r3, [pc, #28]	; (8000190 <readButton+0x44>)
 8000172:	605a      	str	r2, [r3, #4]
	button_state[2] = HAL_GPIO_ReadPin(B_SET_GPIO_Port, B_SET_Pin);
 8000174:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000178:	4804      	ldr	r0, [pc, #16]	; (800018c <readButton+0x40>)
 800017a:	f001 fcd3 	bl	8001b24 <HAL_GPIO_ReadPin>
 800017e:	4603      	mov	r3, r0
 8000180:	461a      	mov	r2, r3
 8000182:	4b03      	ldr	r3, [pc, #12]	; (8000190 <readButton+0x44>)
 8000184:	609a      	str	r2, [r3, #8]
}
 8000186:	bf00      	nop
 8000188:	bd80      	pop	{r7, pc}
 800018a:	bf00      	nop
 800018c:	40010800 	.word	0x40010800
 8000190:	20000078 	.word	0x20000078

08000194 <isSelectPressed>:

int isSelectPressed(){
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
	if(button1_flag == 1){
 8000198:	4b06      	ldr	r3, [pc, #24]	; (80001b4 <isSelectPressed+0x20>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	2b01      	cmp	r3, #1
 800019e:	d104      	bne.n	80001aa <isSelectPressed+0x16>
		button1_flag = 0;
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <isSelectPressed+0x20>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
		return 1;
 80001a6:	2301      	movs	r3, #1
 80001a8:	e000      	b.n	80001ac <isSelectPressed+0x18>
	}
	return 0;
 80001aa:	2300      	movs	r3, #0
}
 80001ac:	4618      	mov	r0, r3
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	2000006c 	.word	0x2000006c

080001b8 <isUpPressed>:
int isUpPressed(){
 80001b8:	b480      	push	{r7}
 80001ba:	af00      	add	r7, sp, #0
	if(button2_flag == 1){
 80001bc:	4b06      	ldr	r3, [pc, #24]	; (80001d8 <isUpPressed+0x20>)
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	2b01      	cmp	r3, #1
 80001c2:	d104      	bne.n	80001ce <isUpPressed+0x16>
		button2_flag = 0;
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <isUpPressed+0x20>)
 80001c6:	2200      	movs	r2, #0
 80001c8:	601a      	str	r2, [r3, #0]
		return 1;
 80001ca:	2301      	movs	r3, #1
 80001cc:	e000      	b.n	80001d0 <isUpPressed+0x18>
	}
	return 0;
 80001ce:	2300      	movs	r3, #0
}
 80001d0:	4618      	mov	r0, r3
 80001d2:	46bd      	mov	sp, r7
 80001d4:	bc80      	pop	{r7}
 80001d6:	4770      	bx	lr
 80001d8:	20000070 	.word	0x20000070

080001dc <isSetPressed>:
int isSetPressed(){
 80001dc:	b480      	push	{r7}
 80001de:	af00      	add	r7, sp, #0
	if(button3_flag == 1){
 80001e0:	4b06      	ldr	r3, [pc, #24]	; (80001fc <isSetPressed+0x20>)
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	2b01      	cmp	r3, #1
 80001e6:	d104      	bne.n	80001f2 <isSetPressed+0x16>
		button3_flag = 0;
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <isSetPressed+0x20>)
 80001ea:	2200      	movs	r2, #0
 80001ec:	601a      	str	r2, [r3, #0]
		return 1;
 80001ee:	2301      	movs	r3, #1
 80001f0:	e000      	b.n	80001f4 <isSetPressed+0x18>
	}
	return 0;
 80001f2:	2300      	movs	r3, #0
}
 80001f4:	4618      	mov	r0, r3
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bc80      	pop	{r7}
 80001fa:	4770      	bx	lr
 80001fc:	20000074 	.word	0x20000074

08000200 <subKeyProcess>:

void subKeyProcess(int i){
 8000200:	b480      	push	{r7}
 8000202:	b083      	sub	sp, #12
 8000204:	af00      	add	r7, sp, #0
 8000206:	6078      	str	r0, [r7, #4]
	if(i==0)button1_flag = 1;
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	2b00      	cmp	r3, #0
 800020c:	d102      	bne.n	8000214 <subKeyProcess+0x14>
 800020e:	4b0a      	ldr	r3, [pc, #40]	; (8000238 <subKeyProcess+0x38>)
 8000210:	2201      	movs	r2, #1
 8000212:	601a      	str	r2, [r3, #0]
	if(i==1) button2_flag = 1;
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	2b01      	cmp	r3, #1
 8000218:	d102      	bne.n	8000220 <subKeyProcess+0x20>
 800021a:	4b08      	ldr	r3, [pc, #32]	; (800023c <subKeyProcess+0x3c>)
 800021c:	2201      	movs	r2, #1
 800021e:	601a      	str	r2, [r3, #0]
	if(i==2) button3_flag = 1;
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	2b02      	cmp	r3, #2
 8000224:	d102      	bne.n	800022c <subKeyProcess+0x2c>
 8000226:	4b06      	ldr	r3, [pc, #24]	; (8000240 <subKeyProcess+0x40>)
 8000228:	2201      	movs	r2, #1
 800022a:	601a      	str	r2, [r3, #0]
}
 800022c:	bf00      	nop
 800022e:	370c      	adds	r7, #12
 8000230:	46bd      	mov	sp, r7
 8000232:	bc80      	pop	{r7}
 8000234:	4770      	bx	lr
 8000236:	bf00      	nop
 8000238:	2000006c 	.word	0x2000006c
 800023c:	20000070 	.word	0x20000070
 8000240:	20000074 	.word	0x20000074

08000244 <getKeyInput>:

void getKeyInput(){
 8000244:	b580      	push	{r7, lr}
 8000246:	b082      	sub	sp, #8
 8000248:	af00      	add	r7, sp, #0
	//Chong rung
	for(int i = 0; i < KEY_SIZE; i++){
 800024a:	2300      	movs	r3, #0
 800024c:	607b      	str	r3, [r7, #4]
 800024e:	e066      	b.n	800031e <getKeyInput+0xda>
		readButton();
 8000250:	f7ff ff7c 	bl	800014c <readButton>
		KeyReg0[i] = KeyReg1[i];
 8000254:	4a36      	ldr	r2, [pc, #216]	; (8000330 <getKeyInput+0xec>)
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800025c:	4935      	ldr	r1, [pc, #212]	; (8000334 <getKeyInput+0xf0>)
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg2[i];
 8000264:	4a34      	ldr	r2, [pc, #208]	; (8000338 <getKeyInput+0xf4>)
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800026c:	4930      	ldr	r1, [pc, #192]	; (8000330 <getKeyInput+0xec>)
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg2[i] = button_state[i];
 8000274:	4a31      	ldr	r2, [pc, #196]	; (800033c <getKeyInput+0xf8>)
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800027c:	492e      	ldr	r1, [pc, #184]	; (8000338 <getKeyInput+0xf4>)
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if((KeyReg0[i] == KeyReg1[i]) && (KeyReg1[i] == KeyReg2[i])){
 8000284:	4a2b      	ldr	r2, [pc, #172]	; (8000334 <getKeyInput+0xf0>)
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800028c:	4928      	ldr	r1, [pc, #160]	; (8000330 <getKeyInput+0xec>)
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000294:	429a      	cmp	r2, r3
 8000296:	d13f      	bne.n	8000318 <getKeyInput+0xd4>
 8000298:	4a25      	ldr	r2, [pc, #148]	; (8000330 <getKeyInput+0xec>)
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002a0:	4925      	ldr	r1, [pc, #148]	; (8000338 <getKeyInput+0xf4>)
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002a8:	429a      	cmp	r2, r3
 80002aa:	d135      	bne.n	8000318 <getKeyInput+0xd4>
			if(KeyReg3[i] != KeyReg2[i]){
 80002ac:	4a24      	ldr	r2, [pc, #144]	; (8000340 <getKeyInput+0xfc>)
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002b4:	4920      	ldr	r1, [pc, #128]	; (8000338 <getKeyInput+0xf4>)
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002bc:	429a      	cmp	r2, r3
 80002be:	d015      	beq.n	80002ec <getKeyInput+0xa8>
				KeyReg3[i] = KeyReg2[i];
 80002c0:	4a1d      	ldr	r2, [pc, #116]	; (8000338 <getKeyInput+0xf4>)
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002c8:	491d      	ldr	r1, [pc, #116]	; (8000340 <getKeyInput+0xfc>)
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(KeyReg2[i] == PRESSED_STATE){
 80002d0:	4a19      	ldr	r2, [pc, #100]	; (8000338 <getKeyInput+0xf4>)
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d11d      	bne.n	8000318 <getKeyInput+0xd4>
					subKeyProcess(i);
 80002dc:	6878      	ldr	r0, [r7, #4]
 80002de:	f7ff ff8f 	bl	8000200 <subKeyProcess>
					TimerForKeyPress = 2000;
 80002e2:	4b18      	ldr	r3, [pc, #96]	; (8000344 <getKeyInput+0x100>)
 80002e4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80002e8:	601a      	str	r2, [r3, #0]
 80002ea:	e015      	b.n	8000318 <getKeyInput+0xd4>
				}
			}
			//Nhan de voi thoi gian TimerForKeyPress
			else{
				   TimerForKeyPress--;
 80002ec:	4b15      	ldr	r3, [pc, #84]	; (8000344 <getKeyInput+0x100>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	3b01      	subs	r3, #1
 80002f2:	4a14      	ldr	r2, [pc, #80]	; (8000344 <getKeyInput+0x100>)
 80002f4:	6013      	str	r3, [r2, #0]
					if (TimerForKeyPress == 0){
 80002f6:	4b13      	ldr	r3, [pc, #76]	; (8000344 <getKeyInput+0x100>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d10c      	bne.n	8000318 <getKeyInput+0xd4>
					   if(KeyReg2[i] == PRESSED_STATE){
 80002fe:	4a0e      	ldr	r2, [pc, #56]	; (8000338 <getKeyInput+0xf4>)
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000306:	2b00      	cmp	r3, #0
 8000308:	d102      	bne.n	8000310 <getKeyInput+0xcc>
						  subKeyProcess(i);
 800030a:	6878      	ldr	r0, [r7, #4]
 800030c:	f7ff ff78 	bl	8000200 <subKeyProcess>
					   }
					  TimerForKeyPress = 2000;
 8000310:	4b0c      	ldr	r3, [pc, #48]	; (8000344 <getKeyInput+0x100>)
 8000312:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000316:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < KEY_SIZE; i++){
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	3301      	adds	r3, #1
 800031c:	607b      	str	r3, [r7, #4]
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	2b02      	cmp	r3, #2
 8000322:	dd95      	ble.n	8000250 <getKeyInput+0xc>
					}
			}
		}
	}
}
 8000324:	bf00      	nop
 8000326:	bf00      	nop
 8000328:	3708      	adds	r7, #8
 800032a:	46bd      	mov	sp, r7
 800032c:	bd80      	pop	{r7, pc}
 800032e:	bf00      	nop
 8000330:	2000000c 	.word	0x2000000c
 8000334:	20000000 	.word	0x20000000
 8000338:	20000018 	.word	0x20000018
 800033c:	20000078 	.word	0x20000078
 8000340:	20000024 	.word	0x20000024
 8000344:	20000030 	.word	0x20000030

08000348 <fsm_automatic_run>:
int count = 0;
int counter1 = 0;
int counter2 = 0;
int segNum = 0;

void fsm_automatic_run(){
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
	switch(status){
 800034c:	4b96      	ldr	r3, [pc, #600]	; (80005a8 <fsm_automatic_run+0x260>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	3b02      	subs	r3, #2
 8000352:	2b04      	cmp	r3, #4
 8000354:	f200 822c 	bhi.w	80007b0 <fsm_automatic_run+0x468>
 8000358:	a201      	add	r2, pc, #4	; (adr r2, 8000360 <fsm_automatic_run+0x18>)
 800035a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800035e:	bf00      	nop
 8000360:	08000375 	.word	0x08000375
 8000364:	080003cb 	.word	0x080003cb
 8000368:	080004af 	.word	0x080004af
 800036c:	080005d5 	.word	0x080005d5
 8000370:	080006b9 	.word	0x080006b9
		case INIT2:
			//Turn off all LEDs
			clearLed();
 8000374:	f000 fd18 	bl	8000da8 <clearLed>

			//set initial status and timers
			status = AUTO_GREEN1;
 8000378:	4b8b      	ldr	r3, [pc, #556]	; (80005a8 <fsm_automatic_run+0x260>)
 800037a:	2203      	movs	r2, #3
 800037c:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 800037e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000382:	f000 ffdb 	bl	800133c <setTimer1>
			setTimer2(500);
 8000386:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800038a:	f000 ffeb 	bl	8001364 <setTimer2>

			//count the number to change status and display 7 SEG led
			count = 1;
 800038e:	4b87      	ldr	r3, [pc, #540]	; (80005ac <fsm_automatic_run+0x264>)
 8000390:	2201      	movs	r2, #1
 8000392:	601a      	str	r2, [r3, #0]
			counter1 = green/1000;
 8000394:	4b86      	ldr	r3, [pc, #536]	; (80005b0 <fsm_automatic_run+0x268>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	4a86      	ldr	r2, [pc, #536]	; (80005b4 <fsm_automatic_run+0x26c>)
 800039a:	fb82 1203 	smull	r1, r2, r2, r3
 800039e:	1192      	asrs	r2, r2, #6
 80003a0:	17db      	asrs	r3, r3, #31
 80003a2:	1ad3      	subs	r3, r2, r3
 80003a4:	4a84      	ldr	r2, [pc, #528]	; (80005b8 <fsm_automatic_run+0x270>)
 80003a6:	6013      	str	r3, [r2, #0]
			counter2 = red/1000;
 80003a8:	4b84      	ldr	r3, [pc, #528]	; (80005bc <fsm_automatic_run+0x274>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	4a81      	ldr	r2, [pc, #516]	; (80005b4 <fsm_automatic_run+0x26c>)
 80003ae:	fb82 1203 	smull	r1, r2, r2, r3
 80003b2:	1192      	asrs	r2, r2, #6
 80003b4:	17db      	asrs	r3, r3, #31
 80003b6:	1ad3      	subs	r3, r2, r3
 80003b8:	4a81      	ldr	r2, [pc, #516]	; (80005c0 <fsm_automatic_run+0x278>)
 80003ba:	6013      	str	r3, [r2, #0]

			segNum = 1;
 80003bc:	4b81      	ldr	r3, [pc, #516]	; (80005c4 <fsm_automatic_run+0x27c>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
			set7SEG(1);
 80003c2:	2001      	movs	r0, #1
 80003c4:	f000 fe2a 	bl	800101c <set7SEG>
			break;
 80003c8:	e1fb      	b.n	80007c2 <fsm_automatic_run+0x47a>
		case AUTO_GREEN1:
			//Turn on Led Green on one lane and Red in another
			setLedGreen1();
 80003ca:	f000 fd27 	bl	8000e1c <setLedGreen1>
			setLedRed2();
 80003ce:	f000 fd51 	bl	8000e74 <setLedRed2>
			//Display 2 7SEG Led to display time
			if(segNum==0){
 80003d2:	4b7c      	ldr	r3, [pc, #496]	; (80005c4 <fsm_automatic_run+0x27c>)
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d107      	bne.n	80003ea <fsm_automatic_run+0xa2>
				set7SEG(1);
 80003da:	2001      	movs	r0, #1
 80003dc:	f000 fe1e 	bl	800101c <set7SEG>
				display7SEG(counter1);
 80003e0:	4b75      	ldr	r3, [pc, #468]	; (80005b8 <fsm_automatic_run+0x270>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	4618      	mov	r0, r3
 80003e6:	f000 fd87 	bl	8000ef8 <display7SEG>
			}
			if(segNum==1){
 80003ea:	4b76      	ldr	r3, [pc, #472]	; (80005c4 <fsm_automatic_run+0x27c>)
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	2b01      	cmp	r3, #1
 80003f0:	d107      	bne.n	8000402 <fsm_automatic_run+0xba>
				set7SEG(3);
 80003f2:	2003      	movs	r0, #3
 80003f4:	f000 fe12 	bl	800101c <set7SEG>
				display7SEG(counter2);
 80003f8:	4b71      	ldr	r3, [pc, #452]	; (80005c0 <fsm_automatic_run+0x278>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	4618      	mov	r0, r3
 80003fe:	f000 fd7b 	bl	8000ef8 <display7SEG>
			}
			if(timer2_flag == 1){
 8000402:	4b71      	ldr	r3, [pc, #452]	; (80005c8 <fsm_automatic_run+0x280>)
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	2b01      	cmp	r3, #1
 8000408:	d109      	bne.n	800041e <fsm_automatic_run+0xd6>
				segNum = 1 - segNum;
 800040a:	4b6e      	ldr	r3, [pc, #440]	; (80005c4 <fsm_automatic_run+0x27c>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	f1c3 0301 	rsb	r3, r3, #1
 8000412:	4a6c      	ldr	r2, [pc, #432]	; (80005c4 <fsm_automatic_run+0x27c>)
 8000414:	6013      	str	r3, [r2, #0]
				setTimer2(500);
 8000416:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800041a:	f000 ffa3 	bl	8001364 <setTimer2>
			}
			//When count up to duration of LED, change status
			if(timer1_flag == 1){
 800041e:	4b6b      	ldr	r3, [pc, #428]	; (80005cc <fsm_automatic_run+0x284>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	2b01      	cmp	r3, #1
 8000424:	d12f      	bne.n	8000486 <fsm_automatic_run+0x13e>
				if(count >= green/1000) {
 8000426:	4b62      	ldr	r3, [pc, #392]	; (80005b0 <fsm_automatic_run+0x268>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	4a62      	ldr	r2, [pc, #392]	; (80005b4 <fsm_automatic_run+0x26c>)
 800042c:	fb82 1203 	smull	r1, r2, r2, r3
 8000430:	1192      	asrs	r2, r2, #6
 8000432:	17db      	asrs	r3, r3, #31
 8000434:	1ad2      	subs	r2, r2, r3
 8000436:	4b5d      	ldr	r3, [pc, #372]	; (80005ac <fsm_automatic_run+0x264>)
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	429a      	cmp	r2, r3
 800043c:	dc10      	bgt.n	8000460 <fsm_automatic_run+0x118>
					status = AUTO_YELLOW1;
 800043e:	4b5a      	ldr	r3, [pc, #360]	; (80005a8 <fsm_automatic_run+0x260>)
 8000440:	2204      	movs	r2, #4
 8000442:	601a      	str	r2, [r3, #0]
					counter1 = yellow/1000 + 1;
 8000444:	4b62      	ldr	r3, [pc, #392]	; (80005d0 <fsm_automatic_run+0x288>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	4a5a      	ldr	r2, [pc, #360]	; (80005b4 <fsm_automatic_run+0x26c>)
 800044a:	fb82 1203 	smull	r1, r2, r2, r3
 800044e:	1192      	asrs	r2, r2, #6
 8000450:	17db      	asrs	r3, r3, #31
 8000452:	1ad3      	subs	r3, r2, r3
 8000454:	3301      	adds	r3, #1
 8000456:	4a58      	ldr	r2, [pc, #352]	; (80005b8 <fsm_automatic_run+0x270>)
 8000458:	6013      	str	r3, [r2, #0]
					count = 0;
 800045a:	4b54      	ldr	r3, [pc, #336]	; (80005ac <fsm_automatic_run+0x264>)
 800045c:	2200      	movs	r2, #0
 800045e:	601a      	str	r2, [r3, #0]
				}
				count++;
 8000460:	4b52      	ldr	r3, [pc, #328]	; (80005ac <fsm_automatic_run+0x264>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	3301      	adds	r3, #1
 8000466:	4a51      	ldr	r2, [pc, #324]	; (80005ac <fsm_automatic_run+0x264>)
 8000468:	6013      	str	r3, [r2, #0]
				counter1--;
 800046a:	4b53      	ldr	r3, [pc, #332]	; (80005b8 <fsm_automatic_run+0x270>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	3b01      	subs	r3, #1
 8000470:	4a51      	ldr	r2, [pc, #324]	; (80005b8 <fsm_automatic_run+0x270>)
 8000472:	6013      	str	r3, [r2, #0]
				counter2--;
 8000474:	4b52      	ldr	r3, [pc, #328]	; (80005c0 <fsm_automatic_run+0x278>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	3b01      	subs	r3, #1
 800047a:	4a51      	ldr	r2, [pc, #324]	; (80005c0 <fsm_automatic_run+0x278>)
 800047c:	6013      	str	r3, [r2, #0]
				setTimer1(1000);
 800047e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000482:	f000 ff5b 	bl	800133c <setTimer1>
			}
			//Fist button pressed -> change mode
			if(isSelectPressed()==1){
 8000486:	f7ff fe85 	bl	8000194 <isSelectPressed>
 800048a:	4603      	mov	r3, r0
 800048c:	2b01      	cmp	r3, #1
 800048e:	f040 8191 	bne.w	80007b4 <fsm_automatic_run+0x46c>
				status = MODE2;
 8000492:	4b45      	ldr	r3, [pc, #276]	; (80005a8 <fsm_automatic_run+0x260>)
 8000494:	220d      	movs	r2, #13
 8000496:	601a      	str	r2, [r3, #0]
				setTimer1(500);
 8000498:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800049c:	f000 ff4e 	bl	800133c <setTimer1>
				setTimer2(500);
 80004a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004a4:	f000 ff5e 	bl	8001364 <setTimer2>
				clearLed();
 80004a8:	f000 fc7e 	bl	8000da8 <clearLed>
			}
			break;
 80004ac:	e182      	b.n	80007b4 <fsm_automatic_run+0x46c>
		case AUTO_YELLOW1:
			//Turn on Led Yellow on one lane and Red in another
			setLedYellow1();
 80004ae:	f000 fccb 	bl	8000e48 <setLedYellow1>
			setLedRed2();
 80004b2:	f000 fcdf 	bl	8000e74 <setLedRed2>
			//Display 2 7SEG Led to display time
			if(segNum==0){
 80004b6:	4b43      	ldr	r3, [pc, #268]	; (80005c4 <fsm_automatic_run+0x27c>)
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d107      	bne.n	80004ce <fsm_automatic_run+0x186>
				set7SEG(1);
 80004be:	2001      	movs	r0, #1
 80004c0:	f000 fdac 	bl	800101c <set7SEG>
				display7SEG(counter1);
 80004c4:	4b3c      	ldr	r3, [pc, #240]	; (80005b8 <fsm_automatic_run+0x270>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	4618      	mov	r0, r3
 80004ca:	f000 fd15 	bl	8000ef8 <display7SEG>
			}
			if(segNum==1){
 80004ce:	4b3d      	ldr	r3, [pc, #244]	; (80005c4 <fsm_automatic_run+0x27c>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	2b01      	cmp	r3, #1
 80004d4:	d107      	bne.n	80004e6 <fsm_automatic_run+0x19e>
				set7SEG(3);
 80004d6:	2003      	movs	r0, #3
 80004d8:	f000 fda0 	bl	800101c <set7SEG>
				display7SEG(counter2);
 80004dc:	4b38      	ldr	r3, [pc, #224]	; (80005c0 <fsm_automatic_run+0x278>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4618      	mov	r0, r3
 80004e2:	f000 fd09 	bl	8000ef8 <display7SEG>
			}
			if(timer2_flag == 1){
 80004e6:	4b38      	ldr	r3, [pc, #224]	; (80005c8 <fsm_automatic_run+0x280>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	2b01      	cmp	r3, #1
 80004ec:	d109      	bne.n	8000502 <fsm_automatic_run+0x1ba>
				segNum = 1 - segNum;
 80004ee:	4b35      	ldr	r3, [pc, #212]	; (80005c4 <fsm_automatic_run+0x27c>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	f1c3 0301 	rsb	r3, r3, #1
 80004f6:	4a33      	ldr	r2, [pc, #204]	; (80005c4 <fsm_automatic_run+0x27c>)
 80004f8:	6013      	str	r3, [r2, #0]
				setTimer2(500);
 80004fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004fe:	f000 ff31 	bl	8001364 <setTimer2>
			}
			if(timer1_flag == 1){
 8000502:	4b32      	ldr	r3, [pc, #200]	; (80005cc <fsm_automatic_run+0x284>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	2b01      	cmp	r3, #1
 8000508:	d13a      	bne.n	8000580 <fsm_automatic_run+0x238>
				if(count >= yellow/1000) {
 800050a:	4b31      	ldr	r3, [pc, #196]	; (80005d0 <fsm_automatic_run+0x288>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	4a29      	ldr	r2, [pc, #164]	; (80005b4 <fsm_automatic_run+0x26c>)
 8000510:	fb82 1203 	smull	r1, r2, r2, r3
 8000514:	1192      	asrs	r2, r2, #6
 8000516:	17db      	asrs	r3, r3, #31
 8000518:	1ad2      	subs	r2, r2, r3
 800051a:	4b24      	ldr	r3, [pc, #144]	; (80005ac <fsm_automatic_run+0x264>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	429a      	cmp	r2, r3
 8000520:	dc1b      	bgt.n	800055a <fsm_automatic_run+0x212>
					status = AUTO_GREEN2;
 8000522:	4b21      	ldr	r3, [pc, #132]	; (80005a8 <fsm_automatic_run+0x260>)
 8000524:	2205      	movs	r2, #5
 8000526:	601a      	str	r2, [r3, #0]
					counter1 = red/1000 + 1;
 8000528:	4b24      	ldr	r3, [pc, #144]	; (80005bc <fsm_automatic_run+0x274>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4a21      	ldr	r2, [pc, #132]	; (80005b4 <fsm_automatic_run+0x26c>)
 800052e:	fb82 1203 	smull	r1, r2, r2, r3
 8000532:	1192      	asrs	r2, r2, #6
 8000534:	17db      	asrs	r3, r3, #31
 8000536:	1ad3      	subs	r3, r2, r3
 8000538:	3301      	adds	r3, #1
 800053a:	4a1f      	ldr	r2, [pc, #124]	; (80005b8 <fsm_automatic_run+0x270>)
 800053c:	6013      	str	r3, [r2, #0]
					counter2 = green/1000 + 1;
 800053e:	4b1c      	ldr	r3, [pc, #112]	; (80005b0 <fsm_automatic_run+0x268>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	4a1c      	ldr	r2, [pc, #112]	; (80005b4 <fsm_automatic_run+0x26c>)
 8000544:	fb82 1203 	smull	r1, r2, r2, r3
 8000548:	1192      	asrs	r2, r2, #6
 800054a:	17db      	asrs	r3, r3, #31
 800054c:	1ad3      	subs	r3, r2, r3
 800054e:	3301      	adds	r3, #1
 8000550:	4a1b      	ldr	r2, [pc, #108]	; (80005c0 <fsm_automatic_run+0x278>)
 8000552:	6013      	str	r3, [r2, #0]
					count = 0;
 8000554:	4b15      	ldr	r3, [pc, #84]	; (80005ac <fsm_automatic_run+0x264>)
 8000556:	2200      	movs	r2, #0
 8000558:	601a      	str	r2, [r3, #0]
				}
				count++;
 800055a:	4b14      	ldr	r3, [pc, #80]	; (80005ac <fsm_automatic_run+0x264>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	3301      	adds	r3, #1
 8000560:	4a12      	ldr	r2, [pc, #72]	; (80005ac <fsm_automatic_run+0x264>)
 8000562:	6013      	str	r3, [r2, #0]
				counter1--;
 8000564:	4b14      	ldr	r3, [pc, #80]	; (80005b8 <fsm_automatic_run+0x270>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	3b01      	subs	r3, #1
 800056a:	4a13      	ldr	r2, [pc, #76]	; (80005b8 <fsm_automatic_run+0x270>)
 800056c:	6013      	str	r3, [r2, #0]
				counter2--;
 800056e:	4b14      	ldr	r3, [pc, #80]	; (80005c0 <fsm_automatic_run+0x278>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	3b01      	subs	r3, #1
 8000574:	4a12      	ldr	r2, [pc, #72]	; (80005c0 <fsm_automatic_run+0x278>)
 8000576:	6013      	str	r3, [r2, #0]
				setTimer1(1000);
 8000578:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800057c:	f000 fede 	bl	800133c <setTimer1>
			}
			//When count up to duration of LED, change status
			if(isSelectPressed()==1){
 8000580:	f7ff fe08 	bl	8000194 <isSelectPressed>
 8000584:	4603      	mov	r3, r0
 8000586:	2b01      	cmp	r3, #1
 8000588:	f040 8116 	bne.w	80007b8 <fsm_automatic_run+0x470>
				status = MODE2;
 800058c:	4b06      	ldr	r3, [pc, #24]	; (80005a8 <fsm_automatic_run+0x260>)
 800058e:	220d      	movs	r2, #13
 8000590:	601a      	str	r2, [r3, #0]
				setTimer1(500);
 8000592:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000596:	f000 fed1 	bl	800133c <setTimer1>
				setTimer2(500);
 800059a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800059e:	f000 fee1 	bl	8001364 <setTimer2>
				clearLed();
 80005a2:	f000 fc01 	bl	8000da8 <clearLed>
			}
			break;
 80005a6:	e107      	b.n	80007b8 <fsm_automatic_run+0x470>
 80005a8:	200000a0 	.word	0x200000a0
 80005ac:	20000084 	.word	0x20000084
 80005b0:	2000003c 	.word	0x2000003c
 80005b4:	10624dd3 	.word	0x10624dd3
 80005b8:	20000088 	.word	0x20000088
 80005bc:	20000038 	.word	0x20000038
 80005c0:	2000008c 	.word	0x2000008c
 80005c4:	20000090 	.word	0x20000090
 80005c8:	200000b0 	.word	0x200000b0
 80005cc:	200000a8 	.word	0x200000a8
 80005d0:	20000040 	.word	0x20000040
		case AUTO_GREEN2:
			//Turn on Led Red on one lane and Green in another
			setLedRed1();
 80005d4:	f000 fc0c 	bl	8000df0 <setLedRed1>
			setLedGreen2();
 80005d8:	f000 fc62 	bl	8000ea0 <setLedGreen2>
			//Display 2 7SEG Led to display time
			if(segNum==0){
 80005dc:	4b7a      	ldr	r3, [pc, #488]	; (80007c8 <fsm_automatic_run+0x480>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d107      	bne.n	80005f4 <fsm_automatic_run+0x2ac>
				set7SEG(1);
 80005e4:	2001      	movs	r0, #1
 80005e6:	f000 fd19 	bl	800101c <set7SEG>
				display7SEG(counter1);
 80005ea:	4b78      	ldr	r3, [pc, #480]	; (80007cc <fsm_automatic_run+0x484>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	4618      	mov	r0, r3
 80005f0:	f000 fc82 	bl	8000ef8 <display7SEG>
			}
			if(segNum==1){
 80005f4:	4b74      	ldr	r3, [pc, #464]	; (80007c8 <fsm_automatic_run+0x480>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	2b01      	cmp	r3, #1
 80005fa:	d107      	bne.n	800060c <fsm_automatic_run+0x2c4>
				set7SEG(3);
 80005fc:	2003      	movs	r0, #3
 80005fe:	f000 fd0d 	bl	800101c <set7SEG>
				display7SEG(counter2);
 8000602:	4b73      	ldr	r3, [pc, #460]	; (80007d0 <fsm_automatic_run+0x488>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	4618      	mov	r0, r3
 8000608:	f000 fc76 	bl	8000ef8 <display7SEG>
			}
			//When count up to duration of LED, change status
			if(timer2_flag == 1){
 800060c:	4b71      	ldr	r3, [pc, #452]	; (80007d4 <fsm_automatic_run+0x48c>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d109      	bne.n	8000628 <fsm_automatic_run+0x2e0>
				segNum = 1 - segNum;
 8000614:	4b6c      	ldr	r3, [pc, #432]	; (80007c8 <fsm_automatic_run+0x480>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f1c3 0301 	rsb	r3, r3, #1
 800061c:	4a6a      	ldr	r2, [pc, #424]	; (80007c8 <fsm_automatic_run+0x480>)
 800061e:	6013      	str	r3, [r2, #0]
				setTimer2(500);
 8000620:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000624:	f000 fe9e 	bl	8001364 <setTimer2>
			}

			if(timer1_flag == 1){
 8000628:	4b6b      	ldr	r3, [pc, #428]	; (80007d8 <fsm_automatic_run+0x490>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	2b01      	cmp	r3, #1
 800062e:	d12f      	bne.n	8000690 <fsm_automatic_run+0x348>
				if(count >= green/1000) {
 8000630:	4b6a      	ldr	r3, [pc, #424]	; (80007dc <fsm_automatic_run+0x494>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a6a      	ldr	r2, [pc, #424]	; (80007e0 <fsm_automatic_run+0x498>)
 8000636:	fb82 1203 	smull	r1, r2, r2, r3
 800063a:	1192      	asrs	r2, r2, #6
 800063c:	17db      	asrs	r3, r3, #31
 800063e:	1ad2      	subs	r2, r2, r3
 8000640:	4b68      	ldr	r3, [pc, #416]	; (80007e4 <fsm_automatic_run+0x49c>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	429a      	cmp	r2, r3
 8000646:	dc10      	bgt.n	800066a <fsm_automatic_run+0x322>
					status = AUTO_YELLOW2;
 8000648:	4b67      	ldr	r3, [pc, #412]	; (80007e8 <fsm_automatic_run+0x4a0>)
 800064a:	2206      	movs	r2, #6
 800064c:	601a      	str	r2, [r3, #0]
					counter2 = yellow/1000 + 1;
 800064e:	4b67      	ldr	r3, [pc, #412]	; (80007ec <fsm_automatic_run+0x4a4>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4a63      	ldr	r2, [pc, #396]	; (80007e0 <fsm_automatic_run+0x498>)
 8000654:	fb82 1203 	smull	r1, r2, r2, r3
 8000658:	1192      	asrs	r2, r2, #6
 800065a:	17db      	asrs	r3, r3, #31
 800065c:	1ad3      	subs	r3, r2, r3
 800065e:	3301      	adds	r3, #1
 8000660:	4a5b      	ldr	r2, [pc, #364]	; (80007d0 <fsm_automatic_run+0x488>)
 8000662:	6013      	str	r3, [r2, #0]
					count = 0;
 8000664:	4b5f      	ldr	r3, [pc, #380]	; (80007e4 <fsm_automatic_run+0x49c>)
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
				}
				count++;
 800066a:	4b5e      	ldr	r3, [pc, #376]	; (80007e4 <fsm_automatic_run+0x49c>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	3301      	adds	r3, #1
 8000670:	4a5c      	ldr	r2, [pc, #368]	; (80007e4 <fsm_automatic_run+0x49c>)
 8000672:	6013      	str	r3, [r2, #0]
				counter1--;
 8000674:	4b55      	ldr	r3, [pc, #340]	; (80007cc <fsm_automatic_run+0x484>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	3b01      	subs	r3, #1
 800067a:	4a54      	ldr	r2, [pc, #336]	; (80007cc <fsm_automatic_run+0x484>)
 800067c:	6013      	str	r3, [r2, #0]
				counter2--;
 800067e:	4b54      	ldr	r3, [pc, #336]	; (80007d0 <fsm_automatic_run+0x488>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	3b01      	subs	r3, #1
 8000684:	4a52      	ldr	r2, [pc, #328]	; (80007d0 <fsm_automatic_run+0x488>)
 8000686:	6013      	str	r3, [r2, #0]
				setTimer1(1000);
 8000688:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800068c:	f000 fe56 	bl	800133c <setTimer1>
			}
			//When count up to duration of LED, change status
			if(isSelectPressed()==1){
 8000690:	f7ff fd80 	bl	8000194 <isSelectPressed>
 8000694:	4603      	mov	r3, r0
 8000696:	2b01      	cmp	r3, #1
 8000698:	f040 8090 	bne.w	80007bc <fsm_automatic_run+0x474>
				status = MODE2;
 800069c:	4b52      	ldr	r3, [pc, #328]	; (80007e8 <fsm_automatic_run+0x4a0>)
 800069e:	220d      	movs	r2, #13
 80006a0:	601a      	str	r2, [r3, #0]
				setTimer1(500);
 80006a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006a6:	f000 fe49 	bl	800133c <setTimer1>
				setTimer2(500);
 80006aa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006ae:	f000 fe59 	bl	8001364 <setTimer2>
				clearLed();
 80006b2:	f000 fb79 	bl	8000da8 <clearLed>
			}
			break;
 80006b6:	e081      	b.n	80007bc <fsm_automatic_run+0x474>
		case AUTO_YELLOW2:
			//Turn on Led Red on one lane and Yellow in another
			setLedRed1();
 80006b8:	f000 fb9a 	bl	8000df0 <setLedRed1>
			setLedYellow2();
 80006bc:	f000 fc06 	bl	8000ecc <setLedYellow2>
			//Display 2 7SEG Led to display time
			if(segNum==0){
 80006c0:	4b41      	ldr	r3, [pc, #260]	; (80007c8 <fsm_automatic_run+0x480>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d107      	bne.n	80006d8 <fsm_automatic_run+0x390>
				set7SEG(1);
 80006c8:	2001      	movs	r0, #1
 80006ca:	f000 fca7 	bl	800101c <set7SEG>
				display7SEG(counter1);
 80006ce:	4b3f      	ldr	r3, [pc, #252]	; (80007cc <fsm_automatic_run+0x484>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	4618      	mov	r0, r3
 80006d4:	f000 fc10 	bl	8000ef8 <display7SEG>
			}
			if(segNum==1){
 80006d8:	4b3b      	ldr	r3, [pc, #236]	; (80007c8 <fsm_automatic_run+0x480>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	2b01      	cmp	r3, #1
 80006de:	d107      	bne.n	80006f0 <fsm_automatic_run+0x3a8>
				set7SEG(3);
 80006e0:	2003      	movs	r0, #3
 80006e2:	f000 fc9b 	bl	800101c <set7SEG>
				display7SEG(counter2);
 80006e6:	4b3a      	ldr	r3, [pc, #232]	; (80007d0 <fsm_automatic_run+0x488>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	4618      	mov	r0, r3
 80006ec:	f000 fc04 	bl	8000ef8 <display7SEG>
			}
			if(timer2_flag == 1){
 80006f0:	4b38      	ldr	r3, [pc, #224]	; (80007d4 <fsm_automatic_run+0x48c>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	2b01      	cmp	r3, #1
 80006f6:	d109      	bne.n	800070c <fsm_automatic_run+0x3c4>
				segNum = 1 - segNum;
 80006f8:	4b33      	ldr	r3, [pc, #204]	; (80007c8 <fsm_automatic_run+0x480>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	f1c3 0301 	rsb	r3, r3, #1
 8000700:	4a31      	ldr	r2, [pc, #196]	; (80007c8 <fsm_automatic_run+0x480>)
 8000702:	6013      	str	r3, [r2, #0]
				setTimer2(500);
 8000704:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000708:	f000 fe2c 	bl	8001364 <setTimer2>
			}
			if(timer1_flag == 1){
 800070c:	4b32      	ldr	r3, [pc, #200]	; (80007d8 <fsm_automatic_run+0x490>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	2b01      	cmp	r3, #1
 8000712:	d13a      	bne.n	800078a <fsm_automatic_run+0x442>
				if(count >= yellow/1000) {
 8000714:	4b35      	ldr	r3, [pc, #212]	; (80007ec <fsm_automatic_run+0x4a4>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a31      	ldr	r2, [pc, #196]	; (80007e0 <fsm_automatic_run+0x498>)
 800071a:	fb82 1203 	smull	r1, r2, r2, r3
 800071e:	1192      	asrs	r2, r2, #6
 8000720:	17db      	asrs	r3, r3, #31
 8000722:	1ad2      	subs	r2, r2, r3
 8000724:	4b2f      	ldr	r3, [pc, #188]	; (80007e4 <fsm_automatic_run+0x49c>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	429a      	cmp	r2, r3
 800072a:	dc1b      	bgt.n	8000764 <fsm_automatic_run+0x41c>
					status = AUTO_GREEN1;
 800072c:	4b2e      	ldr	r3, [pc, #184]	; (80007e8 <fsm_automatic_run+0x4a0>)
 800072e:	2203      	movs	r2, #3
 8000730:	601a      	str	r2, [r3, #0]
					count = 0;
 8000732:	4b2c      	ldr	r3, [pc, #176]	; (80007e4 <fsm_automatic_run+0x49c>)
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
					counter1 = green/1000 + 1;
 8000738:	4b28      	ldr	r3, [pc, #160]	; (80007dc <fsm_automatic_run+0x494>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a28      	ldr	r2, [pc, #160]	; (80007e0 <fsm_automatic_run+0x498>)
 800073e:	fb82 1203 	smull	r1, r2, r2, r3
 8000742:	1192      	asrs	r2, r2, #6
 8000744:	17db      	asrs	r3, r3, #31
 8000746:	1ad3      	subs	r3, r2, r3
 8000748:	3301      	adds	r3, #1
 800074a:	4a20      	ldr	r2, [pc, #128]	; (80007cc <fsm_automatic_run+0x484>)
 800074c:	6013      	str	r3, [r2, #0]
					counter2 = red/1000 + 1;
 800074e:	4b28      	ldr	r3, [pc, #160]	; (80007f0 <fsm_automatic_run+0x4a8>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4a23      	ldr	r2, [pc, #140]	; (80007e0 <fsm_automatic_run+0x498>)
 8000754:	fb82 1203 	smull	r1, r2, r2, r3
 8000758:	1192      	asrs	r2, r2, #6
 800075a:	17db      	asrs	r3, r3, #31
 800075c:	1ad3      	subs	r3, r2, r3
 800075e:	3301      	adds	r3, #1
 8000760:	4a1b      	ldr	r2, [pc, #108]	; (80007d0 <fsm_automatic_run+0x488>)
 8000762:	6013      	str	r3, [r2, #0]
				}
				count++;
 8000764:	4b1f      	ldr	r3, [pc, #124]	; (80007e4 <fsm_automatic_run+0x49c>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	3301      	adds	r3, #1
 800076a:	4a1e      	ldr	r2, [pc, #120]	; (80007e4 <fsm_automatic_run+0x49c>)
 800076c:	6013      	str	r3, [r2, #0]
				counter1--;
 800076e:	4b17      	ldr	r3, [pc, #92]	; (80007cc <fsm_automatic_run+0x484>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	3b01      	subs	r3, #1
 8000774:	4a15      	ldr	r2, [pc, #84]	; (80007cc <fsm_automatic_run+0x484>)
 8000776:	6013      	str	r3, [r2, #0]
				counter2--;
 8000778:	4b15      	ldr	r3, [pc, #84]	; (80007d0 <fsm_automatic_run+0x488>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	3b01      	subs	r3, #1
 800077e:	4a14      	ldr	r2, [pc, #80]	; (80007d0 <fsm_automatic_run+0x488>)
 8000780:	6013      	str	r3, [r2, #0]
				setTimer1(1000);
 8000782:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000786:	f000 fdd9 	bl	800133c <setTimer1>
			}
			//When count up to duration of LED, change status
			if(isSelectPressed()==1){
 800078a:	f7ff fd03 	bl	8000194 <isSelectPressed>
 800078e:	4603      	mov	r3, r0
 8000790:	2b01      	cmp	r3, #1
 8000792:	d115      	bne.n	80007c0 <fsm_automatic_run+0x478>
				status = MODE2;
 8000794:	4b14      	ldr	r3, [pc, #80]	; (80007e8 <fsm_automatic_run+0x4a0>)
 8000796:	220d      	movs	r2, #13
 8000798:	601a      	str	r2, [r3, #0]
				setTimer1(500);
 800079a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800079e:	f000 fdcd 	bl	800133c <setTimer1>
				setTimer2(500);
 80007a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007a6:	f000 fddd 	bl	8001364 <setTimer2>
				clearLed();
 80007aa:	f000 fafd 	bl	8000da8 <clearLed>
			}
			break;
 80007ae:	e007      	b.n	80007c0 <fsm_automatic_run+0x478>
		default:
			break;
 80007b0:	bf00      	nop
 80007b2:	e006      	b.n	80007c2 <fsm_automatic_run+0x47a>
			break;
 80007b4:	bf00      	nop
 80007b6:	e004      	b.n	80007c2 <fsm_automatic_run+0x47a>
			break;
 80007b8:	bf00      	nop
 80007ba:	e002      	b.n	80007c2 <fsm_automatic_run+0x47a>
			break;
 80007bc:	bf00      	nop
 80007be:	e000      	b.n	80007c2 <fsm_automatic_run+0x47a>
			break;
 80007c0:	bf00      	nop
	}
}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	20000090 	.word	0x20000090
 80007cc:	20000088 	.word	0x20000088
 80007d0:	2000008c 	.word	0x2000008c
 80007d4:	200000b0 	.word	0x200000b0
 80007d8:	200000a8 	.word	0x200000a8
 80007dc:	2000003c 	.word	0x2000003c
 80007e0:	10624dd3 	.word	0x10624dd3
 80007e4:	20000084 	.word	0x20000084
 80007e8:	200000a0 	.word	0x200000a0
 80007ec:	20000040 	.word	0x20000040
 80007f0:	20000038 	.word	0x20000038

080007f4 <fsm_manual_run>:
int red_duration = 0;
int green_duration = 0;
int yellow_duration = 0;
int segNumber = 1;

void fsm_manual_run(){
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
	switch(status){
 80007f8:	4b9c      	ldr	r3, [pc, #624]	; (8000a6c <fsm_manual_run+0x278>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	3b01      	subs	r3, #1
 80007fe:	2b0e      	cmp	r3, #14
 8000800:	f200 82b5 	bhi.w	8000d6e <fsm_manual_run+0x57a>
 8000804:	a201      	add	r2, pc, #4	; (adr r2, 800080c <fsm_manual_run+0x18>)
 8000806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800080a:	bf00      	nop
 800080c:	08000849 	.word	0x08000849
 8000810:	08000d6f 	.word	0x08000d6f
 8000814:	08000d6f 	.word	0x08000d6f
 8000818:	08000d6f 	.word	0x08000d6f
 800081c:	08000d6f 	.word	0x08000d6f
 8000820:	08000d6f 	.word	0x08000d6f
 8000824:	08000d6f 	.word	0x08000d6f
 8000828:	08000d6f 	.word	0x08000d6f
 800082c:	08000d6f 	.word	0x08000d6f
 8000830:	08000d6f 	.word	0x08000d6f
 8000834:	08000d6f 	.word	0x08000d6f
 8000838:	080008a7 	.word	0x080008a7
 800083c:	08000905 	.word	0x08000905
 8000840:	08000aa1 	.word	0x08000aa1
 8000844:	08000c07 	.word	0x08000c07
		case INIT1:
			//Set up some variable to use in MODEs
			red_duration = red/1000;
 8000848:	4b89      	ldr	r3, [pc, #548]	; (8000a70 <fsm_manual_run+0x27c>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a89      	ldr	r2, [pc, #548]	; (8000a74 <fsm_manual_run+0x280>)
 800084e:	fb82 1203 	smull	r1, r2, r2, r3
 8000852:	1192      	asrs	r2, r2, #6
 8000854:	17db      	asrs	r3, r3, #31
 8000856:	1ad3      	subs	r3, r2, r3
 8000858:	4a87      	ldr	r2, [pc, #540]	; (8000a78 <fsm_manual_run+0x284>)
 800085a:	6013      	str	r3, [r2, #0]
			green_duration = green/1000;
 800085c:	4b87      	ldr	r3, [pc, #540]	; (8000a7c <fsm_manual_run+0x288>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a84      	ldr	r2, [pc, #528]	; (8000a74 <fsm_manual_run+0x280>)
 8000862:	fb82 1203 	smull	r1, r2, r2, r3
 8000866:	1192      	asrs	r2, r2, #6
 8000868:	17db      	asrs	r3, r3, #31
 800086a:	1ad3      	subs	r3, r2, r3
 800086c:	4a84      	ldr	r2, [pc, #528]	; (8000a80 <fsm_manual_run+0x28c>)
 800086e:	6013      	str	r3, [r2, #0]
			yellow_duration = yellow/1000;
 8000870:	4b84      	ldr	r3, [pc, #528]	; (8000a84 <fsm_manual_run+0x290>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a7f      	ldr	r2, [pc, #508]	; (8000a74 <fsm_manual_run+0x280>)
 8000876:	fb82 1203 	smull	r1, r2, r2, r3
 800087a:	1192      	asrs	r2, r2, #6
 800087c:	17db      	asrs	r3, r3, #31
 800087e:	1ad3      	subs	r3, r2, r3
 8000880:	4a81      	ldr	r2, [pc, #516]	; (8000a88 <fsm_manual_run+0x294>)
 8000882:	6013      	str	r3, [r2, #0]
			segNumber = 1;
 8000884:	4b81      	ldr	r3, [pc, #516]	; (8000a8c <fsm_manual_run+0x298>)
 8000886:	2201      	movs	r2, #1
 8000888:	601a      	str	r2, [r3, #0]

			//Initial state
			status = MODE1;
 800088a:	4b78      	ldr	r3, [pc, #480]	; (8000a6c <fsm_manual_run+0x278>)
 800088c:	220c      	movs	r2, #12
 800088e:	601a      	str	r2, [r3, #0]
			setTimer1(500);
 8000890:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000894:	f000 fd52 	bl	800133c <setTimer1>
			setTimer2(500);
 8000898:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800089c:	f000 fd62 	bl	8001364 <setTimer2>
			clearLed();
 80008a0:	f000 fa82 	bl	8000da8 <clearLed>
			break;
 80008a4:	e26a      	b.n	8000d7c <fsm_manual_run+0x588>
		case MODE1:
			//Display 7SEG Led MODE
			set7SEG(4);
 80008a6:	2004      	movs	r0, #4
 80008a8:	f000 fbb8 	bl	800101c <set7SEG>
			display7SEG(1);
 80008ac:	2001      	movs	r0, #1
 80008ae:	f000 fb23 	bl	8000ef8 <display7SEG>
			if(timer1_flag==1){
 80008b2:	4b77      	ldr	r3, [pc, #476]	; (8000a90 <fsm_manual_run+0x29c>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	2b01      	cmp	r3, #1
 80008b8:	d10f      	bne.n	80008da <fsm_manual_run+0xe6>
				segNumber++;
 80008ba:	4b74      	ldr	r3, [pc, #464]	; (8000a8c <fsm_manual_run+0x298>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	3301      	adds	r3, #1
 80008c0:	4a72      	ldr	r2, [pc, #456]	; (8000a8c <fsm_manual_run+0x298>)
 80008c2:	6013      	str	r3, [r2, #0]
				if(segNumber >= 5) segNumber = 1;
 80008c4:	4b71      	ldr	r3, [pc, #452]	; (8000a8c <fsm_manual_run+0x298>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	2b04      	cmp	r3, #4
 80008ca:	dd02      	ble.n	80008d2 <fsm_manual_run+0xde>
 80008cc:	4b6f      	ldr	r3, [pc, #444]	; (8000a8c <fsm_manual_run+0x298>)
 80008ce:	2201      	movs	r2, #1
 80008d0:	601a      	str	r2, [r3, #0]
				setTimer1(500);
 80008d2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008d6:	f000 fd31 	bl	800133c <setTimer1>
			}
			//Fist button pressed -> change MODE
			if(isSelectPressed()==1){
 80008da:	f7ff fc5b 	bl	8000194 <isSelectPressed>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b01      	cmp	r3, #1
 80008e2:	d10b      	bne.n	80008fc <fsm_manual_run+0x108>
				status = MODE2;
 80008e4:	4b61      	ldr	r3, [pc, #388]	; (8000a6c <fsm_manual_run+0x278>)
 80008e6:	220d      	movs	r2, #13
 80008e8:	601a      	str	r2, [r3, #0]
				setTimer1(500);
 80008ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008ee:	f000 fd25 	bl	800133c <setTimer1>
				setTimer2(500);
 80008f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008f6:	f000 fd35 	bl	8001364 <setTimer2>
			}
			//Change to auto traffic lights
			else{
				status = INIT2;
			}
			break;
 80008fa:	e23f      	b.n	8000d7c <fsm_manual_run+0x588>
				status = INIT2;
 80008fc:	4b5b      	ldr	r3, [pc, #364]	; (8000a6c <fsm_manual_run+0x278>)
 80008fe:	2202      	movs	r2, #2
 8000900:	601a      	str	r2, [r3, #0]
			break;
 8000902:	e23b      	b.n	8000d7c <fsm_manual_run+0x588>
		case MODE2:
			//Display 7SEG Led corresponding to duration(1-2) and MODE (3-4)
			set7SEG(segNumber);
 8000904:	4b61      	ldr	r3, [pc, #388]	; (8000a8c <fsm_manual_run+0x298>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4618      	mov	r0, r3
 800090a:	f000 fb87 	bl	800101c <set7SEG>
			if(segNumber == 1) display7SEG(red_duration/10);
 800090e:	4b5f      	ldr	r3, [pc, #380]	; (8000a8c <fsm_manual_run+0x298>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	2b01      	cmp	r3, #1
 8000914:	d10a      	bne.n	800092c <fsm_manual_run+0x138>
 8000916:	4b58      	ldr	r3, [pc, #352]	; (8000a78 <fsm_manual_run+0x284>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	4a5e      	ldr	r2, [pc, #376]	; (8000a94 <fsm_manual_run+0x2a0>)
 800091c:	fb82 1203 	smull	r1, r2, r2, r3
 8000920:	1092      	asrs	r2, r2, #2
 8000922:	17db      	asrs	r3, r3, #31
 8000924:	1ad3      	subs	r3, r2, r3
 8000926:	4618      	mov	r0, r3
 8000928:	f000 fae6 	bl	8000ef8 <display7SEG>
			if(segNumber == 2) display7SEG(red_duration%10);
 800092c:	4b57      	ldr	r3, [pc, #348]	; (8000a8c <fsm_manual_run+0x298>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	2b02      	cmp	r3, #2
 8000932:	d10f      	bne.n	8000954 <fsm_manual_run+0x160>
 8000934:	4b50      	ldr	r3, [pc, #320]	; (8000a78 <fsm_manual_run+0x284>)
 8000936:	681a      	ldr	r2, [r3, #0]
 8000938:	4b56      	ldr	r3, [pc, #344]	; (8000a94 <fsm_manual_run+0x2a0>)
 800093a:	fb83 1302 	smull	r1, r3, r3, r2
 800093e:	1099      	asrs	r1, r3, #2
 8000940:	17d3      	asrs	r3, r2, #31
 8000942:	1ac9      	subs	r1, r1, r3
 8000944:	460b      	mov	r3, r1
 8000946:	009b      	lsls	r3, r3, #2
 8000948:	440b      	add	r3, r1
 800094a:	005b      	lsls	r3, r3, #1
 800094c:	1ad1      	subs	r1, r2, r3
 800094e:	4608      	mov	r0, r1
 8000950:	f000 fad2 	bl	8000ef8 <display7SEG>
			if(segNumber == 3) display7SEG(0);
 8000954:	4b4d      	ldr	r3, [pc, #308]	; (8000a8c <fsm_manual_run+0x298>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	2b03      	cmp	r3, #3
 800095a:	d102      	bne.n	8000962 <fsm_manual_run+0x16e>
 800095c:	2000      	movs	r0, #0
 800095e:	f000 facb 	bl	8000ef8 <display7SEG>
			if(segNumber == 4) display7SEG(2);
 8000962:	4b4a      	ldr	r3, [pc, #296]	; (8000a8c <fsm_manual_run+0x298>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	2b04      	cmp	r3, #4
 8000968:	d102      	bne.n	8000970 <fsm_manual_run+0x17c>
 800096a:	2002      	movs	r0, #2
 800096c:	f000 fac4 	bl	8000ef8 <display7SEG>
			if(timer1_flag==1){
 8000970:	4b47      	ldr	r3, [pc, #284]	; (8000a90 <fsm_manual_run+0x29c>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	2b01      	cmp	r3, #1
 8000976:	d10f      	bne.n	8000998 <fsm_manual_run+0x1a4>
				segNumber++;
 8000978:	4b44      	ldr	r3, [pc, #272]	; (8000a8c <fsm_manual_run+0x298>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	3301      	adds	r3, #1
 800097e:	4a43      	ldr	r2, [pc, #268]	; (8000a8c <fsm_manual_run+0x298>)
 8000980:	6013      	str	r3, [r2, #0]
				if(segNumber >= 5) segNumber = 1;
 8000982:	4b42      	ldr	r3, [pc, #264]	; (8000a8c <fsm_manual_run+0x298>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	2b04      	cmp	r3, #4
 8000988:	dd02      	ble.n	8000990 <fsm_manual_run+0x19c>
 800098a:	4b40      	ldr	r3, [pc, #256]	; (8000a8c <fsm_manual_run+0x298>)
 800098c:	2201      	movs	r2, #1
 800098e:	601a      	str	r2, [r3, #0]
				setTimer1(500);
 8000990:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000994:	f000 fcd2 	bl	800133c <setTimer1>
			};
			//Blinking LEDs
			if(timer2_flag==1){
 8000998:	4b3f      	ldr	r3, [pc, #252]	; (8000a98 <fsm_manual_run+0x2a4>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	2b01      	cmp	r3, #1
 800099e:	d11b      	bne.n	80009d8 <fsm_manual_run+0x1e4>
				HAL_GPIO_TogglePin(LED_RED1_GPIO_Port, LED_RED1_Pin);
 80009a0:	2108      	movs	r1, #8
 80009a2:	483e      	ldr	r0, [pc, #248]	; (8000a9c <fsm_manual_run+0x2a8>)
 80009a4:	f001 f8ed 	bl	8001b82 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin);
 80009a8:	2102      	movs	r1, #2
 80009aa:	483c      	ldr	r0, [pc, #240]	; (8000a9c <fsm_manual_run+0x2a8>)
 80009ac:	f001 f8e9 	bl	8001b82 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin);
 80009b0:	2104      	movs	r1, #4
 80009b2:	483a      	ldr	r0, [pc, #232]	; (8000a9c <fsm_manual_run+0x2a8>)
 80009b4:	f001 f8e5 	bl	8001b82 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LED_RED2_GPIO_Port, LED_RED2_Pin);
 80009b8:	2140      	movs	r1, #64	; 0x40
 80009ba:	4838      	ldr	r0, [pc, #224]	; (8000a9c <fsm_manual_run+0x2a8>)
 80009bc:	f001 f8e1 	bl	8001b82 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin);
 80009c0:	2110      	movs	r1, #16
 80009c2:	4836      	ldr	r0, [pc, #216]	; (8000a9c <fsm_manual_run+0x2a8>)
 80009c4:	f001 f8dd 	bl	8001b82 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin);
 80009c8:	2120      	movs	r1, #32
 80009ca:	4834      	ldr	r0, [pc, #208]	; (8000a9c <fsm_manual_run+0x2a8>)
 80009cc:	f001 f8d9 	bl	8001b82 <HAL_GPIO_TogglePin>
				setTimer2(500);
 80009d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009d4:	f000 fcc6 	bl	8001364 <setTimer2>
			}
			//Fist button pressed -> change MODE
			if(isSelectPressed()==1){
 80009d8:	f7ff fbdc 	bl	8000194 <isSelectPressed>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b01      	cmp	r3, #1
 80009e0:	d10d      	bne.n	80009fe <fsm_manual_run+0x20a>
				status = MODE3;
 80009e2:	4b22      	ldr	r3, [pc, #136]	; (8000a6c <fsm_manual_run+0x278>)
 80009e4:	220e      	movs	r2, #14
 80009e6:	601a      	str	r2, [r3, #0]
				segNumber = 1;
 80009e8:	4b28      	ldr	r3, [pc, #160]	; (8000a8c <fsm_manual_run+0x298>)
 80009ea:	2201      	movs	r2, #1
 80009ec:	601a      	str	r2, [r3, #0]
				setTimer1(500);
 80009ee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009f2:	f000 fca3 	bl	800133c <setTimer1>
				setTimer2(500);
 80009f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009fa:	f000 fcb3 	bl	8001364 <setTimer2>
			}
			//Second button pressed -> increase time duration of LED
			if(isUpPressed()==1){
 80009fe:	f7ff fbdb 	bl	80001b8 <isUpPressed>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b01      	cmp	r3, #1
 8000a06:	d116      	bne.n	8000a36 <fsm_manual_run+0x242>
				red_duration++;
 8000a08:	4b1b      	ldr	r3, [pc, #108]	; (8000a78 <fsm_manual_run+0x284>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	4a1a      	ldr	r2, [pc, #104]	; (8000a78 <fsm_manual_run+0x284>)
 8000a10:	6013      	str	r3, [r2, #0]
				if(red_duration >= 100) red_duration = 1;
 8000a12:	4b19      	ldr	r3, [pc, #100]	; (8000a78 <fsm_manual_run+0x284>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	2b63      	cmp	r3, #99	; 0x63
 8000a18:	dd02      	ble.n	8000a20 <fsm_manual_run+0x22c>
 8000a1a:	4b17      	ldr	r3, [pc, #92]	; (8000a78 <fsm_manual_run+0x284>)
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	601a      	str	r2, [r3, #0]
				status = MODE2;
 8000a20:	4b12      	ldr	r3, [pc, #72]	; (8000a6c <fsm_manual_run+0x278>)
 8000a22:	220d      	movs	r2, #13
 8000a24:	601a      	str	r2, [r3, #0]
				setTimer1(500);
 8000a26:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a2a:	f000 fc87 	bl	800133c <setTimer1>
				setTimer2(500);
 8000a2e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a32:	f000 fc97 	bl	8001364 <setTimer2>
			}
			//Third button pressed -> set time duration to LED
			if(isSetPressed()==1){
 8000a36:	f7ff fbd1 	bl	80001dc <isSetPressed>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b01      	cmp	r3, #1
 8000a3e:	f040 8198 	bne.w	8000d72 <fsm_manual_run+0x57e>
				red = red_duration*1000;
 8000a42:	4b0d      	ldr	r3, [pc, #52]	; (8000a78 <fsm_manual_run+0x284>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a4a:	fb02 f303 	mul.w	r3, r2, r3
 8000a4e:	4a08      	ldr	r2, [pc, #32]	; (8000a70 <fsm_manual_run+0x27c>)
 8000a50:	6013      	str	r3, [r2, #0]
				status = MODE2;
 8000a52:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <fsm_manual_run+0x278>)
 8000a54:	220d      	movs	r2, #13
 8000a56:	601a      	str	r2, [r3, #0]
				setTimer1(500);
 8000a58:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a5c:	f000 fc6e 	bl	800133c <setTimer1>
				setTimer2(500);
 8000a60:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a64:	f000 fc7e 	bl	8001364 <setTimer2>
			}
			break;
 8000a68:	e183      	b.n	8000d72 <fsm_manual_run+0x57e>
 8000a6a:	bf00      	nop
 8000a6c:	200000a0 	.word	0x200000a0
 8000a70:	20000038 	.word	0x20000038
 8000a74:	10624dd3 	.word	0x10624dd3
 8000a78:	20000094 	.word	0x20000094
 8000a7c:	2000003c 	.word	0x2000003c
 8000a80:	20000098 	.word	0x20000098
 8000a84:	20000040 	.word	0x20000040
 8000a88:	2000009c 	.word	0x2000009c
 8000a8c:	20000034 	.word	0x20000034
 8000a90:	200000a8 	.word	0x200000a8
 8000a94:	66666667 	.word	0x66666667
 8000a98:	200000b0 	.word	0x200000b0
 8000a9c:	40010800 	.word	0x40010800
		case MODE3:
			//Display 7SEG Led corresponding to duration(1-2) and MODE (3-4)
			set7SEG(segNumber);
 8000aa0:	4bb7      	ldr	r3, [pc, #732]	; (8000d80 <fsm_manual_run+0x58c>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f000 fab9 	bl	800101c <set7SEG>
			if(segNumber == 1) display7SEG(yellow_duration/10);
 8000aaa:	4bb5      	ldr	r3, [pc, #724]	; (8000d80 <fsm_manual_run+0x58c>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	d10a      	bne.n	8000ac8 <fsm_manual_run+0x2d4>
 8000ab2:	4bb4      	ldr	r3, [pc, #720]	; (8000d84 <fsm_manual_run+0x590>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	4ab4      	ldr	r2, [pc, #720]	; (8000d88 <fsm_manual_run+0x594>)
 8000ab8:	fb82 1203 	smull	r1, r2, r2, r3
 8000abc:	1092      	asrs	r2, r2, #2
 8000abe:	17db      	asrs	r3, r3, #31
 8000ac0:	1ad3      	subs	r3, r2, r3
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f000 fa18 	bl	8000ef8 <display7SEG>
			if(segNumber == 2) display7SEG(yellow_duration%10);
 8000ac8:	4bad      	ldr	r3, [pc, #692]	; (8000d80 <fsm_manual_run+0x58c>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	2b02      	cmp	r3, #2
 8000ace:	d10f      	bne.n	8000af0 <fsm_manual_run+0x2fc>
 8000ad0:	4bac      	ldr	r3, [pc, #688]	; (8000d84 <fsm_manual_run+0x590>)
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	4bac      	ldr	r3, [pc, #688]	; (8000d88 <fsm_manual_run+0x594>)
 8000ad6:	fb83 1302 	smull	r1, r3, r3, r2
 8000ada:	1099      	asrs	r1, r3, #2
 8000adc:	17d3      	asrs	r3, r2, #31
 8000ade:	1ac9      	subs	r1, r1, r3
 8000ae0:	460b      	mov	r3, r1
 8000ae2:	009b      	lsls	r3, r3, #2
 8000ae4:	440b      	add	r3, r1
 8000ae6:	005b      	lsls	r3, r3, #1
 8000ae8:	1ad1      	subs	r1, r2, r3
 8000aea:	4608      	mov	r0, r1
 8000aec:	f000 fa04 	bl	8000ef8 <display7SEG>
			if(segNumber == 3) display7SEG(0);
 8000af0:	4ba3      	ldr	r3, [pc, #652]	; (8000d80 <fsm_manual_run+0x58c>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	2b03      	cmp	r3, #3
 8000af6:	d102      	bne.n	8000afe <fsm_manual_run+0x30a>
 8000af8:	2000      	movs	r0, #0
 8000afa:	f000 f9fd 	bl	8000ef8 <display7SEG>
			if(segNumber == 4) display7SEG(3);
 8000afe:	4ba0      	ldr	r3, [pc, #640]	; (8000d80 <fsm_manual_run+0x58c>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	2b04      	cmp	r3, #4
 8000b04:	d102      	bne.n	8000b0c <fsm_manual_run+0x318>
 8000b06:	2003      	movs	r0, #3
 8000b08:	f000 f9f6 	bl	8000ef8 <display7SEG>
			if(timer1_flag==1){
 8000b0c:	4b9f      	ldr	r3, [pc, #636]	; (8000d8c <fsm_manual_run+0x598>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	2b01      	cmp	r3, #1
 8000b12:	d10f      	bne.n	8000b34 <fsm_manual_run+0x340>
				segNumber++;
 8000b14:	4b9a      	ldr	r3, [pc, #616]	; (8000d80 <fsm_manual_run+0x58c>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	3301      	adds	r3, #1
 8000b1a:	4a99      	ldr	r2, [pc, #612]	; (8000d80 <fsm_manual_run+0x58c>)
 8000b1c:	6013      	str	r3, [r2, #0]
				if(segNumber >= 5) segNumber = 1;
 8000b1e:	4b98      	ldr	r3, [pc, #608]	; (8000d80 <fsm_manual_run+0x58c>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	2b04      	cmp	r3, #4
 8000b24:	dd02      	ble.n	8000b2c <fsm_manual_run+0x338>
 8000b26:	4b96      	ldr	r3, [pc, #600]	; (8000d80 <fsm_manual_run+0x58c>)
 8000b28:	2201      	movs	r2, #1
 8000b2a:	601a      	str	r2, [r3, #0]
				setTimer1(500);
 8000b2c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b30:	f000 fc04 	bl	800133c <setTimer1>
			};
			//Blinking LEDs
			if(timer2_flag==1){
 8000b34:	4b96      	ldr	r3, [pc, #600]	; (8000d90 <fsm_manual_run+0x59c>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	2b01      	cmp	r3, #1
 8000b3a:	d11b      	bne.n	8000b74 <fsm_manual_run+0x380>
				HAL_GPIO_TogglePin(LED_RED1_GPIO_Port, LED_RED1_Pin);
 8000b3c:	2108      	movs	r1, #8
 8000b3e:	4895      	ldr	r0, [pc, #596]	; (8000d94 <fsm_manual_run+0x5a0>)
 8000b40:	f001 f81f 	bl	8001b82 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin);
 8000b44:	2102      	movs	r1, #2
 8000b46:	4893      	ldr	r0, [pc, #588]	; (8000d94 <fsm_manual_run+0x5a0>)
 8000b48:	f001 f81b 	bl	8001b82 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin);
 8000b4c:	2104      	movs	r1, #4
 8000b4e:	4891      	ldr	r0, [pc, #580]	; (8000d94 <fsm_manual_run+0x5a0>)
 8000b50:	f001 f817 	bl	8001b82 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LED_RED2_GPIO_Port, LED_RED2_Pin);
 8000b54:	2140      	movs	r1, #64	; 0x40
 8000b56:	488f      	ldr	r0, [pc, #572]	; (8000d94 <fsm_manual_run+0x5a0>)
 8000b58:	f001 f813 	bl	8001b82 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin);
 8000b5c:	2110      	movs	r1, #16
 8000b5e:	488d      	ldr	r0, [pc, #564]	; (8000d94 <fsm_manual_run+0x5a0>)
 8000b60:	f001 f80f 	bl	8001b82 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin);
 8000b64:	2120      	movs	r1, #32
 8000b66:	488b      	ldr	r0, [pc, #556]	; (8000d94 <fsm_manual_run+0x5a0>)
 8000b68:	f001 f80b 	bl	8001b82 <HAL_GPIO_TogglePin>
				setTimer2(500);
 8000b6c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b70:	f000 fbf8 	bl	8001364 <setTimer2>
			}
			//Fist button pressed -> change MODE
			if(isSelectPressed()==1){
 8000b74:	f7ff fb0e 	bl	8000194 <isSelectPressed>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b01      	cmp	r3, #1
 8000b7c:	d10d      	bne.n	8000b9a <fsm_manual_run+0x3a6>
				status = MODE4;
 8000b7e:	4b86      	ldr	r3, [pc, #536]	; (8000d98 <fsm_manual_run+0x5a4>)
 8000b80:	220f      	movs	r2, #15
 8000b82:	601a      	str	r2, [r3, #0]
				segNumber = 1;
 8000b84:	4b7e      	ldr	r3, [pc, #504]	; (8000d80 <fsm_manual_run+0x58c>)
 8000b86:	2201      	movs	r2, #1
 8000b88:	601a      	str	r2, [r3, #0]
				setTimer1(500);
 8000b8a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b8e:	f000 fbd5 	bl	800133c <setTimer1>
				setTimer2(500);
 8000b92:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b96:	f000 fbe5 	bl	8001364 <setTimer2>
			}
			//Second button pressed -> increase time duration of LED
			if(isUpPressed()==1){
 8000b9a:	f7ff fb0d 	bl	80001b8 <isUpPressed>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b01      	cmp	r3, #1
 8000ba2:	d116      	bne.n	8000bd2 <fsm_manual_run+0x3de>
				yellow_duration++;
 8000ba4:	4b77      	ldr	r3, [pc, #476]	; (8000d84 <fsm_manual_run+0x590>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	3301      	adds	r3, #1
 8000baa:	4a76      	ldr	r2, [pc, #472]	; (8000d84 <fsm_manual_run+0x590>)
 8000bac:	6013      	str	r3, [r2, #0]
				if(yellow_duration >= 100) yellow_duration = 1;
 8000bae:	4b75      	ldr	r3, [pc, #468]	; (8000d84 <fsm_manual_run+0x590>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	2b63      	cmp	r3, #99	; 0x63
 8000bb4:	dd02      	ble.n	8000bbc <fsm_manual_run+0x3c8>
 8000bb6:	4b73      	ldr	r3, [pc, #460]	; (8000d84 <fsm_manual_run+0x590>)
 8000bb8:	2201      	movs	r2, #1
 8000bba:	601a      	str	r2, [r3, #0]
				status = MODE3;
 8000bbc:	4b76      	ldr	r3, [pc, #472]	; (8000d98 <fsm_manual_run+0x5a4>)
 8000bbe:	220e      	movs	r2, #14
 8000bc0:	601a      	str	r2, [r3, #0]
				setTimer1(500);
 8000bc2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bc6:	f000 fbb9 	bl	800133c <setTimer1>
				setTimer2(500);
 8000bca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bce:	f000 fbc9 	bl	8001364 <setTimer2>
			}
			//Third button pressed -> set time duration to LED
			if(isSetPressed()==1){
 8000bd2:	f7ff fb03 	bl	80001dc <isSetPressed>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b01      	cmp	r3, #1
 8000bda:	f040 80cc 	bne.w	8000d76 <fsm_manual_run+0x582>
				yellow = yellow_duration*1000;
 8000bde:	4b69      	ldr	r3, [pc, #420]	; (8000d84 <fsm_manual_run+0x590>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000be6:	fb02 f303 	mul.w	r3, r2, r3
 8000bea:	4a6c      	ldr	r2, [pc, #432]	; (8000d9c <fsm_manual_run+0x5a8>)
 8000bec:	6013      	str	r3, [r2, #0]
				status = MODE3;
 8000bee:	4b6a      	ldr	r3, [pc, #424]	; (8000d98 <fsm_manual_run+0x5a4>)
 8000bf0:	220e      	movs	r2, #14
 8000bf2:	601a      	str	r2, [r3, #0]
				setTimer1(500);
 8000bf4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bf8:	f000 fba0 	bl	800133c <setTimer1>
				setTimer2(500);
 8000bfc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c00:	f000 fbb0 	bl	8001364 <setTimer2>
			}
			break;
 8000c04:	e0b7      	b.n	8000d76 <fsm_manual_run+0x582>
		case MODE4:
			//Display 7SEG Led corresponding to duration(1-2) and MODE (3-4)
			set7SEG(segNumber);
 8000c06:	4b5e      	ldr	r3, [pc, #376]	; (8000d80 <fsm_manual_run+0x58c>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f000 fa06 	bl	800101c <set7SEG>
			if(segNumber == 1) display7SEG(green_duration/10);
 8000c10:	4b5b      	ldr	r3, [pc, #364]	; (8000d80 <fsm_manual_run+0x58c>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	2b01      	cmp	r3, #1
 8000c16:	d10a      	bne.n	8000c2e <fsm_manual_run+0x43a>
 8000c18:	4b61      	ldr	r3, [pc, #388]	; (8000da0 <fsm_manual_run+0x5ac>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a5a      	ldr	r2, [pc, #360]	; (8000d88 <fsm_manual_run+0x594>)
 8000c1e:	fb82 1203 	smull	r1, r2, r2, r3
 8000c22:	1092      	asrs	r2, r2, #2
 8000c24:	17db      	asrs	r3, r3, #31
 8000c26:	1ad3      	subs	r3, r2, r3
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f000 f965 	bl	8000ef8 <display7SEG>
			if(segNumber == 2) display7SEG(green_duration%10);
 8000c2e:	4b54      	ldr	r3, [pc, #336]	; (8000d80 <fsm_manual_run+0x58c>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	2b02      	cmp	r3, #2
 8000c34:	d10f      	bne.n	8000c56 <fsm_manual_run+0x462>
 8000c36:	4b5a      	ldr	r3, [pc, #360]	; (8000da0 <fsm_manual_run+0x5ac>)
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	4b53      	ldr	r3, [pc, #332]	; (8000d88 <fsm_manual_run+0x594>)
 8000c3c:	fb83 1302 	smull	r1, r3, r3, r2
 8000c40:	1099      	asrs	r1, r3, #2
 8000c42:	17d3      	asrs	r3, r2, #31
 8000c44:	1ac9      	subs	r1, r1, r3
 8000c46:	460b      	mov	r3, r1
 8000c48:	009b      	lsls	r3, r3, #2
 8000c4a:	440b      	add	r3, r1
 8000c4c:	005b      	lsls	r3, r3, #1
 8000c4e:	1ad1      	subs	r1, r2, r3
 8000c50:	4608      	mov	r0, r1
 8000c52:	f000 f951 	bl	8000ef8 <display7SEG>
			if(segNumber == 3) display7SEG(0);
 8000c56:	4b4a      	ldr	r3, [pc, #296]	; (8000d80 <fsm_manual_run+0x58c>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	2b03      	cmp	r3, #3
 8000c5c:	d102      	bne.n	8000c64 <fsm_manual_run+0x470>
 8000c5e:	2000      	movs	r0, #0
 8000c60:	f000 f94a 	bl	8000ef8 <display7SEG>
			if(segNumber == 4) display7SEG(4);
 8000c64:	4b46      	ldr	r3, [pc, #280]	; (8000d80 <fsm_manual_run+0x58c>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	2b04      	cmp	r3, #4
 8000c6a:	d102      	bne.n	8000c72 <fsm_manual_run+0x47e>
 8000c6c:	2004      	movs	r0, #4
 8000c6e:	f000 f943 	bl	8000ef8 <display7SEG>
			if(timer1_flag==1){
 8000c72:	4b46      	ldr	r3, [pc, #280]	; (8000d8c <fsm_manual_run+0x598>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	2b01      	cmp	r3, #1
 8000c78:	d10f      	bne.n	8000c9a <fsm_manual_run+0x4a6>
				segNumber++;
 8000c7a:	4b41      	ldr	r3, [pc, #260]	; (8000d80 <fsm_manual_run+0x58c>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	3301      	adds	r3, #1
 8000c80:	4a3f      	ldr	r2, [pc, #252]	; (8000d80 <fsm_manual_run+0x58c>)
 8000c82:	6013      	str	r3, [r2, #0]
				if(segNumber >= 5) segNumber = 1;
 8000c84:	4b3e      	ldr	r3, [pc, #248]	; (8000d80 <fsm_manual_run+0x58c>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	2b04      	cmp	r3, #4
 8000c8a:	dd02      	ble.n	8000c92 <fsm_manual_run+0x49e>
 8000c8c:	4b3c      	ldr	r3, [pc, #240]	; (8000d80 <fsm_manual_run+0x58c>)
 8000c8e:	2201      	movs	r2, #1
 8000c90:	601a      	str	r2, [r3, #0]
				setTimer1(500);
 8000c92:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c96:	f000 fb51 	bl	800133c <setTimer1>
			};
			//Blinking LEDs
			if(timer2_flag==1){
 8000c9a:	4b3d      	ldr	r3, [pc, #244]	; (8000d90 <fsm_manual_run+0x59c>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	2b01      	cmp	r3, #1
 8000ca0:	d11b      	bne.n	8000cda <fsm_manual_run+0x4e6>
				HAL_GPIO_TogglePin(LED_RED1_GPIO_Port, LED_RED1_Pin);
 8000ca2:	2108      	movs	r1, #8
 8000ca4:	483b      	ldr	r0, [pc, #236]	; (8000d94 <fsm_manual_run+0x5a0>)
 8000ca6:	f000 ff6c 	bl	8001b82 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin);
 8000caa:	2102      	movs	r1, #2
 8000cac:	4839      	ldr	r0, [pc, #228]	; (8000d94 <fsm_manual_run+0x5a0>)
 8000cae:	f000 ff68 	bl	8001b82 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin);
 8000cb2:	2104      	movs	r1, #4
 8000cb4:	4837      	ldr	r0, [pc, #220]	; (8000d94 <fsm_manual_run+0x5a0>)
 8000cb6:	f000 ff64 	bl	8001b82 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LED_RED2_GPIO_Port, LED_RED2_Pin);
 8000cba:	2140      	movs	r1, #64	; 0x40
 8000cbc:	4835      	ldr	r0, [pc, #212]	; (8000d94 <fsm_manual_run+0x5a0>)
 8000cbe:	f000 ff60 	bl	8001b82 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin);
 8000cc2:	2110      	movs	r1, #16
 8000cc4:	4833      	ldr	r0, [pc, #204]	; (8000d94 <fsm_manual_run+0x5a0>)
 8000cc6:	f000 ff5c 	bl	8001b82 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin);
 8000cca:	2120      	movs	r1, #32
 8000ccc:	4831      	ldr	r0, [pc, #196]	; (8000d94 <fsm_manual_run+0x5a0>)
 8000cce:	f000 ff58 	bl	8001b82 <HAL_GPIO_TogglePin>
				setTimer2(500);
 8000cd2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cd6:	f000 fb45 	bl	8001364 <setTimer2>
			}
			//Fist button pressed -> change MODE
			if(isSelectPressed()==1){
 8000cda:	f7ff fa5b 	bl	8000194 <isSelectPressed>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b01      	cmp	r3, #1
 8000ce2:	d10f      	bne.n	8000d04 <fsm_manual_run+0x510>
				status = MODE1;
 8000ce4:	4b2c      	ldr	r3, [pc, #176]	; (8000d98 <fsm_manual_run+0x5a4>)
 8000ce6:	220c      	movs	r2, #12
 8000ce8:	601a      	str	r2, [r3, #0]
				segNumber = 1;
 8000cea:	4b25      	ldr	r3, [pc, #148]	; (8000d80 <fsm_manual_run+0x58c>)
 8000cec:	2201      	movs	r2, #1
 8000cee:	601a      	str	r2, [r3, #0]
				setTimer1(500);
 8000cf0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cf4:	f000 fb22 	bl	800133c <setTimer1>
				setTimer2(500);
 8000cf8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cfc:	f000 fb32 	bl	8001364 <setTimer2>
				clearLed();
 8000d00:	f000 f852 	bl	8000da8 <clearLed>
			}
			//Second button pressed -> increase time duration of LED
			if(isUpPressed()==1){
 8000d04:	f7ff fa58 	bl	80001b8 <isUpPressed>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b01      	cmp	r3, #1
 8000d0c:	d116      	bne.n	8000d3c <fsm_manual_run+0x548>
				green_duration++;
 8000d0e:	4b24      	ldr	r3, [pc, #144]	; (8000da0 <fsm_manual_run+0x5ac>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	3301      	adds	r3, #1
 8000d14:	4a22      	ldr	r2, [pc, #136]	; (8000da0 <fsm_manual_run+0x5ac>)
 8000d16:	6013      	str	r3, [r2, #0]
				if(green_duration >= 100) green_duration = 1;
 8000d18:	4b21      	ldr	r3, [pc, #132]	; (8000da0 <fsm_manual_run+0x5ac>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	2b63      	cmp	r3, #99	; 0x63
 8000d1e:	dd02      	ble.n	8000d26 <fsm_manual_run+0x532>
 8000d20:	4b1f      	ldr	r3, [pc, #124]	; (8000da0 <fsm_manual_run+0x5ac>)
 8000d22:	2201      	movs	r2, #1
 8000d24:	601a      	str	r2, [r3, #0]
				status = MODE4;
 8000d26:	4b1c      	ldr	r3, [pc, #112]	; (8000d98 <fsm_manual_run+0x5a4>)
 8000d28:	220f      	movs	r2, #15
 8000d2a:	601a      	str	r2, [r3, #0]
				setTimer1(500);
 8000d2c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d30:	f000 fb04 	bl	800133c <setTimer1>
				setTimer2(500);
 8000d34:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d38:	f000 fb14 	bl	8001364 <setTimer2>
			}
			//Third button pressed -> set time duration to LED
			if(isSetPressed()==1){
 8000d3c:	f7ff fa4e 	bl	80001dc <isSetPressed>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	d119      	bne.n	8000d7a <fsm_manual_run+0x586>
				green = green_duration*1000;
 8000d46:	4b16      	ldr	r3, [pc, #88]	; (8000da0 <fsm_manual_run+0x5ac>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d4e:	fb02 f303 	mul.w	r3, r2, r3
 8000d52:	4a14      	ldr	r2, [pc, #80]	; (8000da4 <fsm_manual_run+0x5b0>)
 8000d54:	6013      	str	r3, [r2, #0]
				status = MODE4;
 8000d56:	4b10      	ldr	r3, [pc, #64]	; (8000d98 <fsm_manual_run+0x5a4>)
 8000d58:	220f      	movs	r2, #15
 8000d5a:	601a      	str	r2, [r3, #0]
				setTimer1(500);
 8000d5c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d60:	f000 faec 	bl	800133c <setTimer1>
				setTimer2(500);
 8000d64:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d68:	f000 fafc 	bl	8001364 <setTimer2>
			}
			break;
 8000d6c:	e005      	b.n	8000d7a <fsm_manual_run+0x586>
		default:
			break;
 8000d6e:	bf00      	nop
 8000d70:	e004      	b.n	8000d7c <fsm_manual_run+0x588>
			break;
 8000d72:	bf00      	nop
 8000d74:	e002      	b.n	8000d7c <fsm_manual_run+0x588>
			break;
 8000d76:	bf00      	nop
 8000d78:	e000      	b.n	8000d7c <fsm_manual_run+0x588>
			break;
 8000d7a:	bf00      	nop
	}
}
 8000d7c:	bf00      	nop
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	20000034 	.word	0x20000034
 8000d84:	2000009c 	.word	0x2000009c
 8000d88:	66666667 	.word	0x66666667
 8000d8c:	200000a8 	.word	0x200000a8
 8000d90:	200000b0 	.word	0x200000b0
 8000d94:	40010800 	.word	0x40010800
 8000d98:	200000a0 	.word	0x200000a0
 8000d9c:	20000040 	.word	0x20000040
 8000da0:	20000098 	.word	0x20000098
 8000da4:	2000003c 	.word	0x2000003c

08000da8 <clearLed>:
 *  Created on: Nov 4, 2022
 *      Author: PC PHUONG
 */
#include <function.h>

void clearLed(){
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, GPIO_PIN_RESET);
 8000dac:	2200      	movs	r2, #0
 8000dae:	2108      	movs	r1, #8
 8000db0:	480e      	ldr	r0, [pc, #56]	; (8000dec <clearLed+0x44>)
 8000db2:	f000 fece 	bl	8001b52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, GPIO_PIN_RESET);
 8000db6:	2200      	movs	r2, #0
 8000db8:	2102      	movs	r1, #2
 8000dba:	480c      	ldr	r0, [pc, #48]	; (8000dec <clearLed+0x44>)
 8000dbc:	f000 fec9 	bl	8001b52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, GPIO_PIN_RESET);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	2104      	movs	r1, #4
 8000dc4:	4809      	ldr	r0, [pc, #36]	; (8000dec <clearLed+0x44>)
 8000dc6:	f000 fec4 	bl	8001b52 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, GPIO_PIN_RESET);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	2140      	movs	r1, #64	; 0x40
 8000dce:	4807      	ldr	r0, [pc, #28]	; (8000dec <clearLed+0x44>)
 8000dd0:	f000 febf 	bl	8001b52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, GPIO_PIN_RESET);
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	2110      	movs	r1, #16
 8000dd8:	4804      	ldr	r0, [pc, #16]	; (8000dec <clearLed+0x44>)
 8000dda:	f000 feba 	bl	8001b52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, GPIO_PIN_RESET);
 8000dde:	2200      	movs	r2, #0
 8000de0:	2120      	movs	r1, #32
 8000de2:	4802      	ldr	r0, [pc, #8]	; (8000dec <clearLed+0x44>)
 8000de4:	f000 feb5 	bl	8001b52 <HAL_GPIO_WritePin>
}
 8000de8:	bf00      	nop
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	40010800 	.word	0x40010800

08000df0 <setLedRed1>:

void setLedRed1(){
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, GPIO_PIN_SET);
 8000df4:	2201      	movs	r2, #1
 8000df6:	2108      	movs	r1, #8
 8000df8:	4807      	ldr	r0, [pc, #28]	; (8000e18 <setLedRed1+0x28>)
 8000dfa:	f000 feaa 	bl	8001b52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, GPIO_PIN_RESET);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	2102      	movs	r1, #2
 8000e02:	4805      	ldr	r0, [pc, #20]	; (8000e18 <setLedRed1+0x28>)
 8000e04:	f000 fea5 	bl	8001b52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, GPIO_PIN_RESET);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	2104      	movs	r1, #4
 8000e0c:	4802      	ldr	r0, [pc, #8]	; (8000e18 <setLedRed1+0x28>)
 8000e0e:	f000 fea0 	bl	8001b52 <HAL_GPIO_WritePin>
}
 8000e12:	bf00      	nop
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	40010800 	.word	0x40010800

08000e1c <setLedGreen1>:

void setLedGreen1(){
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, GPIO_PIN_RESET);
 8000e20:	2200      	movs	r2, #0
 8000e22:	2108      	movs	r1, #8
 8000e24:	4807      	ldr	r0, [pc, #28]	; (8000e44 <setLedGreen1+0x28>)
 8000e26:	f000 fe94 	bl	8001b52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, GPIO_PIN_SET);
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	2102      	movs	r1, #2
 8000e2e:	4805      	ldr	r0, [pc, #20]	; (8000e44 <setLedGreen1+0x28>)
 8000e30:	f000 fe8f 	bl	8001b52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, GPIO_PIN_RESET);
 8000e34:	2200      	movs	r2, #0
 8000e36:	2104      	movs	r1, #4
 8000e38:	4802      	ldr	r0, [pc, #8]	; (8000e44 <setLedGreen1+0x28>)
 8000e3a:	f000 fe8a 	bl	8001b52 <HAL_GPIO_WritePin>
}
 8000e3e:	bf00      	nop
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	40010800 	.word	0x40010800

08000e48 <setLedYellow1>:

void setLedYellow1(){
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, GPIO_PIN_RESET);
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	2108      	movs	r1, #8
 8000e50:	4807      	ldr	r0, [pc, #28]	; (8000e70 <setLedYellow1+0x28>)
 8000e52:	f000 fe7e 	bl	8001b52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, GPIO_PIN_RESET);
 8000e56:	2200      	movs	r2, #0
 8000e58:	2102      	movs	r1, #2
 8000e5a:	4805      	ldr	r0, [pc, #20]	; (8000e70 <setLedYellow1+0x28>)
 8000e5c:	f000 fe79 	bl	8001b52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, GPIO_PIN_SET);
 8000e60:	2201      	movs	r2, #1
 8000e62:	2104      	movs	r1, #4
 8000e64:	4802      	ldr	r0, [pc, #8]	; (8000e70 <setLedYellow1+0x28>)
 8000e66:	f000 fe74 	bl	8001b52 <HAL_GPIO_WritePin>
}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	40010800 	.word	0x40010800

08000e74 <setLedRed2>:

void setLedRed2(){
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, GPIO_PIN_SET);
 8000e78:	2201      	movs	r2, #1
 8000e7a:	2140      	movs	r1, #64	; 0x40
 8000e7c:	4807      	ldr	r0, [pc, #28]	; (8000e9c <setLedRed2+0x28>)
 8000e7e:	f000 fe68 	bl	8001b52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, GPIO_PIN_RESET);
 8000e82:	2200      	movs	r2, #0
 8000e84:	2110      	movs	r1, #16
 8000e86:	4805      	ldr	r0, [pc, #20]	; (8000e9c <setLedRed2+0x28>)
 8000e88:	f000 fe63 	bl	8001b52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, GPIO_PIN_RESET);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	2120      	movs	r1, #32
 8000e90:	4802      	ldr	r0, [pc, #8]	; (8000e9c <setLedRed2+0x28>)
 8000e92:	f000 fe5e 	bl	8001b52 <HAL_GPIO_WritePin>
}
 8000e96:	bf00      	nop
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40010800 	.word	0x40010800

08000ea0 <setLedGreen2>:

void setLedGreen2(){
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, GPIO_PIN_RESET);
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	2140      	movs	r1, #64	; 0x40
 8000ea8:	4807      	ldr	r0, [pc, #28]	; (8000ec8 <setLedGreen2+0x28>)
 8000eaa:	f000 fe52 	bl	8001b52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, GPIO_PIN_SET);
 8000eae:	2201      	movs	r2, #1
 8000eb0:	2110      	movs	r1, #16
 8000eb2:	4805      	ldr	r0, [pc, #20]	; (8000ec8 <setLedGreen2+0x28>)
 8000eb4:	f000 fe4d 	bl	8001b52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, GPIO_PIN_RESET);
 8000eb8:	2200      	movs	r2, #0
 8000eba:	2120      	movs	r1, #32
 8000ebc:	4802      	ldr	r0, [pc, #8]	; (8000ec8 <setLedGreen2+0x28>)
 8000ebe:	f000 fe48 	bl	8001b52 <HAL_GPIO_WritePin>
}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40010800 	.word	0x40010800

08000ecc <setLedYellow2>:

void setLedYellow2(){
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, GPIO_PIN_RESET);
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	2140      	movs	r1, #64	; 0x40
 8000ed4:	4807      	ldr	r0, [pc, #28]	; (8000ef4 <setLedYellow2+0x28>)
 8000ed6:	f000 fe3c 	bl	8001b52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, GPIO_PIN_RESET);
 8000eda:	2200      	movs	r2, #0
 8000edc:	2110      	movs	r1, #16
 8000ede:	4805      	ldr	r0, [pc, #20]	; (8000ef4 <setLedYellow2+0x28>)
 8000ee0:	f000 fe37 	bl	8001b52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, GPIO_PIN_SET);
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	2120      	movs	r1, #32
 8000ee8:	4802      	ldr	r0, [pc, #8]	; (8000ef4 <setLedYellow2+0x28>)
 8000eea:	f000 fe32 	bl	8001b52 <HAL_GPIO_WritePin>
}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40010800 	.word	0x40010800

08000ef8 <display7SEG>:

void display7SEG(int num){
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
	if(num == 1){
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d10a      	bne.n	8000f1c <display7SEG+0x24>
		HAL_GPIO_WritePin(GPIOB, 0x06, GPIO_PIN_RESET);
 8000f06:	2200      	movs	r2, #0
 8000f08:	2106      	movs	r1, #6
 8000f0a:	4843      	ldr	r0, [pc, #268]	; (8001018 <display7SEG+0x120>)
 8000f0c:	f000 fe21 	bl	8001b52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, 0x79, GPIO_PIN_SET);
 8000f10:	2201      	movs	r2, #1
 8000f12:	2179      	movs	r1, #121	; 0x79
 8000f14:	4840      	ldr	r0, [pc, #256]	; (8001018 <display7SEG+0x120>)
 8000f16:	f000 fe1c 	bl	8001b52 <HAL_GPIO_WritePin>
	else{
		HAL_GPIO_WritePin(GPIOB, 0x3F, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOB, 0x40, GPIO_PIN_SET);
	}

}
 8000f1a:	e079      	b.n	8001010 <display7SEG+0x118>
	else if(num == 2){
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2b02      	cmp	r3, #2
 8000f20:	d10a      	bne.n	8000f38 <display7SEG+0x40>
		HAL_GPIO_WritePin(GPIOB, 0x5B, GPIO_PIN_RESET);
 8000f22:	2200      	movs	r2, #0
 8000f24:	215b      	movs	r1, #91	; 0x5b
 8000f26:	483c      	ldr	r0, [pc, #240]	; (8001018 <display7SEG+0x120>)
 8000f28:	f000 fe13 	bl	8001b52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, 0x24, GPIO_PIN_SET);
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	2124      	movs	r1, #36	; 0x24
 8000f30:	4839      	ldr	r0, [pc, #228]	; (8001018 <display7SEG+0x120>)
 8000f32:	f000 fe0e 	bl	8001b52 <HAL_GPIO_WritePin>
}
 8000f36:	e06b      	b.n	8001010 <display7SEG+0x118>
	else if(num == 3){
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2b03      	cmp	r3, #3
 8000f3c:	d10a      	bne.n	8000f54 <display7SEG+0x5c>
		HAL_GPIO_WritePin(GPIOB, 0x4F, GPIO_PIN_RESET);
 8000f3e:	2200      	movs	r2, #0
 8000f40:	214f      	movs	r1, #79	; 0x4f
 8000f42:	4835      	ldr	r0, [pc, #212]	; (8001018 <display7SEG+0x120>)
 8000f44:	f000 fe05 	bl	8001b52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, 0x30, GPIO_PIN_SET);
 8000f48:	2201      	movs	r2, #1
 8000f4a:	2130      	movs	r1, #48	; 0x30
 8000f4c:	4832      	ldr	r0, [pc, #200]	; (8001018 <display7SEG+0x120>)
 8000f4e:	f000 fe00 	bl	8001b52 <HAL_GPIO_WritePin>
}
 8000f52:	e05d      	b.n	8001010 <display7SEG+0x118>
	else if(num == 4){
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2b04      	cmp	r3, #4
 8000f58:	d10a      	bne.n	8000f70 <display7SEG+0x78>
		HAL_GPIO_WritePin(GPIOB, 0x66, GPIO_PIN_RESET);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	2166      	movs	r1, #102	; 0x66
 8000f5e:	482e      	ldr	r0, [pc, #184]	; (8001018 <display7SEG+0x120>)
 8000f60:	f000 fdf7 	bl	8001b52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, 0x19, GPIO_PIN_SET);
 8000f64:	2201      	movs	r2, #1
 8000f66:	2119      	movs	r1, #25
 8000f68:	482b      	ldr	r0, [pc, #172]	; (8001018 <display7SEG+0x120>)
 8000f6a:	f000 fdf2 	bl	8001b52 <HAL_GPIO_WritePin>
}
 8000f6e:	e04f      	b.n	8001010 <display7SEG+0x118>
	else if(num == 5){
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2b05      	cmp	r3, #5
 8000f74:	d10a      	bne.n	8000f8c <display7SEG+0x94>
		HAL_GPIO_WritePin(GPIOB, 0x6D, GPIO_PIN_RESET);
 8000f76:	2200      	movs	r2, #0
 8000f78:	216d      	movs	r1, #109	; 0x6d
 8000f7a:	4827      	ldr	r0, [pc, #156]	; (8001018 <display7SEG+0x120>)
 8000f7c:	f000 fde9 	bl	8001b52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, 0x12, GPIO_PIN_SET);
 8000f80:	2201      	movs	r2, #1
 8000f82:	2112      	movs	r1, #18
 8000f84:	4824      	ldr	r0, [pc, #144]	; (8001018 <display7SEG+0x120>)
 8000f86:	f000 fde4 	bl	8001b52 <HAL_GPIO_WritePin>
}
 8000f8a:	e041      	b.n	8001010 <display7SEG+0x118>
	else if(num == 6){
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2b06      	cmp	r3, #6
 8000f90:	d10a      	bne.n	8000fa8 <display7SEG+0xb0>
		HAL_GPIO_WritePin(GPIOB, 0x7D, GPIO_PIN_RESET);
 8000f92:	2200      	movs	r2, #0
 8000f94:	217d      	movs	r1, #125	; 0x7d
 8000f96:	4820      	ldr	r0, [pc, #128]	; (8001018 <display7SEG+0x120>)
 8000f98:	f000 fddb 	bl	8001b52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, 0x02, GPIO_PIN_SET);
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	2102      	movs	r1, #2
 8000fa0:	481d      	ldr	r0, [pc, #116]	; (8001018 <display7SEG+0x120>)
 8000fa2:	f000 fdd6 	bl	8001b52 <HAL_GPIO_WritePin>
}
 8000fa6:	e033      	b.n	8001010 <display7SEG+0x118>
	else if(num == 7){
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2b07      	cmp	r3, #7
 8000fac:	d10a      	bne.n	8000fc4 <display7SEG+0xcc>
		HAL_GPIO_WritePin(GPIOB, 0x07, GPIO_PIN_RESET);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	2107      	movs	r1, #7
 8000fb2:	4819      	ldr	r0, [pc, #100]	; (8001018 <display7SEG+0x120>)
 8000fb4:	f000 fdcd 	bl	8001b52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, 0x78, GPIO_PIN_SET);
 8000fb8:	2201      	movs	r2, #1
 8000fba:	2178      	movs	r1, #120	; 0x78
 8000fbc:	4816      	ldr	r0, [pc, #88]	; (8001018 <display7SEG+0x120>)
 8000fbe:	f000 fdc8 	bl	8001b52 <HAL_GPIO_WritePin>
}
 8000fc2:	e025      	b.n	8001010 <display7SEG+0x118>
	else if(num == 8){
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2b08      	cmp	r3, #8
 8000fc8:	d10a      	bne.n	8000fe0 <display7SEG+0xe8>
		HAL_GPIO_WritePin(GPIOB, 0x7F, GPIO_PIN_RESET);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	217f      	movs	r1, #127	; 0x7f
 8000fce:	4812      	ldr	r0, [pc, #72]	; (8001018 <display7SEG+0x120>)
 8000fd0:	f000 fdbf 	bl	8001b52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, 0x00, GPIO_PIN_SET);
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	480f      	ldr	r0, [pc, #60]	; (8001018 <display7SEG+0x120>)
 8000fda:	f000 fdba 	bl	8001b52 <HAL_GPIO_WritePin>
}
 8000fde:	e017      	b.n	8001010 <display7SEG+0x118>
	else if(num == 9){
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2b09      	cmp	r3, #9
 8000fe4:	d10a      	bne.n	8000ffc <display7SEG+0x104>
		HAL_GPIO_WritePin(GPIOB, 0x6F, GPIO_PIN_RESET);
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	216f      	movs	r1, #111	; 0x6f
 8000fea:	480b      	ldr	r0, [pc, #44]	; (8001018 <display7SEG+0x120>)
 8000fec:	f000 fdb1 	bl	8001b52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, 0x10, GPIO_PIN_SET);
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	2110      	movs	r1, #16
 8000ff4:	4808      	ldr	r0, [pc, #32]	; (8001018 <display7SEG+0x120>)
 8000ff6:	f000 fdac 	bl	8001b52 <HAL_GPIO_WritePin>
}
 8000ffa:	e009      	b.n	8001010 <display7SEG+0x118>
		HAL_GPIO_WritePin(GPIOB, 0x3F, GPIO_PIN_RESET);
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	213f      	movs	r1, #63	; 0x3f
 8001000:	4805      	ldr	r0, [pc, #20]	; (8001018 <display7SEG+0x120>)
 8001002:	f000 fda6 	bl	8001b52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, 0x40, GPIO_PIN_SET);
 8001006:	2201      	movs	r2, #1
 8001008:	2140      	movs	r1, #64	; 0x40
 800100a:	4803      	ldr	r0, [pc, #12]	; (8001018 <display7SEG+0x120>)
 800100c:	f000 fda1 	bl	8001b52 <HAL_GPIO_WritePin>
}
 8001010:	bf00      	nop
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	40010c00 	.word	0x40010c00

0800101c <set7SEG>:

void set7SEG(int num){
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
	if(num==1){
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2b01      	cmp	r3, #1
 8001028:	d116      	bne.n	8001058 <set7SEG+0x3c>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 800102a:	2200      	movs	r2, #0
 800102c:	2180      	movs	r1, #128	; 0x80
 800102e:	4833      	ldr	r0, [pc, #204]	; (80010fc <set7SEG+0xe0>)
 8001030:	f000 fd8f 	bl	8001b52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8001034:	2201      	movs	r2, #1
 8001036:	f44f 7180 	mov.w	r1, #256	; 0x100
 800103a:	4830      	ldr	r0, [pc, #192]	; (80010fc <set7SEG+0xe0>)
 800103c:	f000 fd89 	bl	8001b52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8001040:	2201      	movs	r2, #1
 8001042:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001046:	482d      	ldr	r0, [pc, #180]	; (80010fc <set7SEG+0xe0>)
 8001048:	f000 fd83 	bl	8001b52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, GPIO_PIN_SET);
 800104c:	2201      	movs	r2, #1
 800104e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001052:	482a      	ldr	r0, [pc, #168]	; (80010fc <set7SEG+0xe0>)
 8001054:	f000 fd7d 	bl	8001b52 <HAL_GPIO_WritePin>
	}
	if(num==2){
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2b02      	cmp	r3, #2
 800105c:	d116      	bne.n	800108c <set7SEG+0x70>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 800105e:	2201      	movs	r2, #1
 8001060:	2180      	movs	r1, #128	; 0x80
 8001062:	4826      	ldr	r0, [pc, #152]	; (80010fc <set7SEG+0xe0>)
 8001064:	f000 fd75 	bl	8001b52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 8001068:	2200      	movs	r2, #0
 800106a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800106e:	4823      	ldr	r0, [pc, #140]	; (80010fc <set7SEG+0xe0>)
 8001070:	f000 fd6f 	bl	8001b52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8001074:	2201      	movs	r2, #1
 8001076:	f44f 7100 	mov.w	r1, #512	; 0x200
 800107a:	4820      	ldr	r0, [pc, #128]	; (80010fc <set7SEG+0xe0>)
 800107c:	f000 fd69 	bl	8001b52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, GPIO_PIN_SET);
 8001080:	2201      	movs	r2, #1
 8001082:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001086:	481d      	ldr	r0, [pc, #116]	; (80010fc <set7SEG+0xe0>)
 8001088:	f000 fd63 	bl	8001b52 <HAL_GPIO_WritePin>
	}
	if(num==3){
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2b03      	cmp	r3, #3
 8001090:	d116      	bne.n	80010c0 <set7SEG+0xa4>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8001092:	2201      	movs	r2, #1
 8001094:	2180      	movs	r1, #128	; 0x80
 8001096:	4819      	ldr	r0, [pc, #100]	; (80010fc <set7SEG+0xe0>)
 8001098:	f000 fd5b 	bl	8001b52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 800109c:	2201      	movs	r2, #1
 800109e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010a2:	4816      	ldr	r0, [pc, #88]	; (80010fc <set7SEG+0xe0>)
 80010a4:	f000 fd55 	bl	8001b52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 80010a8:	2200      	movs	r2, #0
 80010aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010ae:	4813      	ldr	r0, [pc, #76]	; (80010fc <set7SEG+0xe0>)
 80010b0:	f000 fd4f 	bl	8001b52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, GPIO_PIN_SET);
 80010b4:	2201      	movs	r2, #1
 80010b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010ba:	4810      	ldr	r0, [pc, #64]	; (80010fc <set7SEG+0xe0>)
 80010bc:	f000 fd49 	bl	8001b52 <HAL_GPIO_WritePin>
	}
	if(num==4){
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2b04      	cmp	r3, #4
 80010c4:	d116      	bne.n	80010f4 <set7SEG+0xd8>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 80010c6:	2201      	movs	r2, #1
 80010c8:	2180      	movs	r1, #128	; 0x80
 80010ca:	480c      	ldr	r0, [pc, #48]	; (80010fc <set7SEG+0xe0>)
 80010cc:	f000 fd41 	bl	8001b52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 80010d0:	2201      	movs	r2, #1
 80010d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010d6:	4809      	ldr	r0, [pc, #36]	; (80010fc <set7SEG+0xe0>)
 80010d8:	f000 fd3b 	bl	8001b52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 80010dc:	2201      	movs	r2, #1
 80010de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010e2:	4806      	ldr	r0, [pc, #24]	; (80010fc <set7SEG+0xe0>)
 80010e4:	f000 fd35 	bl	8001b52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, GPIO_PIN_RESET);
 80010e8:	2200      	movs	r2, #0
 80010ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010ee:	4803      	ldr	r0, [pc, #12]	; (80010fc <set7SEG+0xe0>)
 80010f0:	f000 fd2f 	bl	8001b52 <HAL_GPIO_WritePin>
	}
}
 80010f4:	bf00      	nop
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	40010800 	.word	0x40010800

08001100 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001104:	f000 fa24 	bl	8001550 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001108:	f000 f81c 	bl	8001144 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800110c:	f000 f8a2 	bl	8001254 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001110:	f000 f854 	bl	80011bc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2 );
 8001114:	4809      	ldr	r0, [pc, #36]	; (800113c <main+0x3c>)
 8001116:	f001 f985 	bl	8002424 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  status = INIT1;
 800111a:	4b09      	ldr	r3, [pc, #36]	; (8001140 <main+0x40>)
 800111c:	2201      	movs	r2, #1
 800111e:	601a      	str	r2, [r3, #0]
  setTimer1(500);
 8001120:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001124:	f000 f90a 	bl	800133c <setTimer1>
  setTimer2(500);
 8001128:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800112c:	f000 f91a 	bl	8001364 <setTimer2>
  while (1)
  {
	  //FSM of system
	  fsm_manual_run();
 8001130:	f7ff fb60 	bl	80007f4 <fsm_manual_run>
	  //FSM of MODE1
	  fsm_automatic_run();
 8001134:	f7ff f908 	bl	8000348 <fsm_automatic_run>
	  fsm_manual_run();
 8001138:	e7fa      	b.n	8001130 <main+0x30>
 800113a:	bf00      	nop
 800113c:	200000b4 	.word	0x200000b4
 8001140:	200000a0 	.word	0x200000a0

08001144 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b090      	sub	sp, #64	; 0x40
 8001148:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800114a:	f107 0318 	add.w	r3, r7, #24
 800114e:	2228      	movs	r2, #40	; 0x28
 8001150:	2100      	movs	r1, #0
 8001152:	4618      	mov	r0, r3
 8001154:	f001 fd1e 	bl	8002b94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001158:	1d3b      	adds	r3, r7, #4
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	605a      	str	r2, [r3, #4]
 8001160:	609a      	str	r2, [r3, #8]
 8001162:	60da      	str	r2, [r3, #12]
 8001164:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001166:	2302      	movs	r3, #2
 8001168:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800116a:	2301      	movs	r3, #1
 800116c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800116e:	2310      	movs	r3, #16
 8001170:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001172:	2300      	movs	r3, #0
 8001174:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001176:	f107 0318 	add.w	r3, r7, #24
 800117a:	4618      	mov	r0, r3
 800117c:	f000 fd1a 	bl	8001bb4 <HAL_RCC_OscConfig>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001186:	f000 f8d3 	bl	8001330 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800118a:	230f      	movs	r3, #15
 800118c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800118e:	2300      	movs	r3, #0
 8001190:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001192:	2300      	movs	r3, #0
 8001194:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001196:	2300      	movs	r3, #0
 8001198:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800119a:	2300      	movs	r3, #0
 800119c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800119e:	1d3b      	adds	r3, r7, #4
 80011a0:	2100      	movs	r1, #0
 80011a2:	4618      	mov	r0, r3
 80011a4:	f000 ff86 	bl	80020b4 <HAL_RCC_ClockConfig>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80011ae:	f000 f8bf 	bl	8001330 <Error_Handler>
  }
}
 80011b2:	bf00      	nop
 80011b4:	3740      	adds	r7, #64	; 0x40
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
	...

080011bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b086      	sub	sp, #24
 80011c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011c2:	f107 0308 	add.w	r3, r7, #8
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	605a      	str	r2, [r3, #4]
 80011cc:	609a      	str	r2, [r3, #8]
 80011ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011d0:	463b      	mov	r3, r7
 80011d2:	2200      	movs	r2, #0
 80011d4:	601a      	str	r2, [r3, #0]
 80011d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011d8:	4b1d      	ldr	r3, [pc, #116]	; (8001250 <MX_TIM2_Init+0x94>)
 80011da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011de:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 799;
 80011e0:	4b1b      	ldr	r3, [pc, #108]	; (8001250 <MX_TIM2_Init+0x94>)
 80011e2:	f240 321f 	movw	r2, #799	; 0x31f
 80011e6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011e8:	4b19      	ldr	r3, [pc, #100]	; (8001250 <MX_TIM2_Init+0x94>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80011ee:	4b18      	ldr	r3, [pc, #96]	; (8001250 <MX_TIM2_Init+0x94>)
 80011f0:	2209      	movs	r2, #9
 80011f2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011f4:	4b16      	ldr	r3, [pc, #88]	; (8001250 <MX_TIM2_Init+0x94>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011fa:	4b15      	ldr	r3, [pc, #84]	; (8001250 <MX_TIM2_Init+0x94>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001200:	4813      	ldr	r0, [pc, #76]	; (8001250 <MX_TIM2_Init+0x94>)
 8001202:	f001 f8bf 	bl	8002384 <HAL_TIM_Base_Init>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800120c:	f000 f890 	bl	8001330 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001210:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001214:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001216:	f107 0308 	add.w	r3, r7, #8
 800121a:	4619      	mov	r1, r3
 800121c:	480c      	ldr	r0, [pc, #48]	; (8001250 <MX_TIM2_Init+0x94>)
 800121e:	f001 fa55 	bl	80026cc <HAL_TIM_ConfigClockSource>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001228:	f000 f882 	bl	8001330 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800122c:	2300      	movs	r3, #0
 800122e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001230:	2300      	movs	r3, #0
 8001232:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001234:	463b      	mov	r3, r7
 8001236:	4619      	mov	r1, r3
 8001238:	4805      	ldr	r0, [pc, #20]	; (8001250 <MX_TIM2_Init+0x94>)
 800123a:	f001 fc1d 	bl	8002a78 <HAL_TIMEx_MasterConfigSynchronization>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001244:	f000 f874 	bl	8001330 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001248:	bf00      	nop
 800124a:	3718      	adds	r7, #24
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	200000b4 	.word	0x200000b4

08001254 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b086      	sub	sp, #24
 8001258:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125a:	f107 0308 	add.w	r3, r7, #8
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	605a      	str	r2, [r3, #4]
 8001264:	609a      	str	r2, [r3, #8]
 8001266:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001268:	4b28      	ldr	r3, [pc, #160]	; (800130c <MX_GPIO_Init+0xb8>)
 800126a:	699b      	ldr	r3, [r3, #24]
 800126c:	4a27      	ldr	r2, [pc, #156]	; (800130c <MX_GPIO_Init+0xb8>)
 800126e:	f043 0304 	orr.w	r3, r3, #4
 8001272:	6193      	str	r3, [r2, #24]
 8001274:	4b25      	ldr	r3, [pc, #148]	; (800130c <MX_GPIO_Init+0xb8>)
 8001276:	699b      	ldr	r3, [r3, #24]
 8001278:	f003 0304 	and.w	r3, r3, #4
 800127c:	607b      	str	r3, [r7, #4]
 800127e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001280:	4b22      	ldr	r3, [pc, #136]	; (800130c <MX_GPIO_Init+0xb8>)
 8001282:	699b      	ldr	r3, [r3, #24]
 8001284:	4a21      	ldr	r2, [pc, #132]	; (800130c <MX_GPIO_Init+0xb8>)
 8001286:	f043 0308 	orr.w	r3, r3, #8
 800128a:	6193      	str	r3, [r2, #24]
 800128c:	4b1f      	ldr	r3, [pc, #124]	; (800130c <MX_GPIO_Init+0xb8>)
 800128e:	699b      	ldr	r3, [r3, #24]
 8001290:	f003 0308 	and.w	r3, r3, #8
 8001294:	603b      	str	r3, [r7, #0]
 8001296:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_GREEN1_Pin|LED_YELLOW1_Pin|LED_RED1_Pin|LED_GREEN2_Pin
 8001298:	2200      	movs	r2, #0
 800129a:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800129e:	481c      	ldr	r0, [pc, #112]	; (8001310 <MX_GPIO_Init+0xbc>)
 80012a0:	f000 fc57 	bl	8001b52 <HAL_GPIO_WritePin>
                          |LED_YELLOW2_Pin|LED_RED2_Pin|EN1_Pin|EN2_Pin
                          |EN3_Pin|EN4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, a_Pin|b_Pin|c_Pin|d_Pin
 80012a4:	2200      	movs	r2, #0
 80012a6:	217f      	movs	r1, #127	; 0x7f
 80012a8:	481a      	ldr	r0, [pc, #104]	; (8001314 <MX_GPIO_Init+0xc0>)
 80012aa:	f000 fc52 	bl	8001b52 <HAL_GPIO_WritePin>
                          |e_Pin|f_Pin|g_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_GREEN1_Pin LED_YELLOW1_Pin LED_RED1_Pin LED_GREEN2_Pin
                           LED_YELLOW2_Pin LED_RED2_Pin EN1_Pin EN2_Pin
                           EN3_Pin EN4_Pin */
  GPIO_InitStruct.Pin = LED_GREEN1_Pin|LED_YELLOW1_Pin|LED_RED1_Pin|LED_GREEN2_Pin
 80012ae:	f240 73fe 	movw	r3, #2046	; 0x7fe
 80012b2:	60bb      	str	r3, [r7, #8]
                          |LED_YELLOW2_Pin|LED_RED2_Pin|EN1_Pin|EN2_Pin
                          |EN3_Pin|EN4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b4:	2301      	movs	r3, #1
 80012b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b8:	2300      	movs	r3, #0
 80012ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012bc:	2302      	movs	r3, #2
 80012be:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c0:	f107 0308 	add.w	r3, r7, #8
 80012c4:	4619      	mov	r1, r3
 80012c6:	4812      	ldr	r0, [pc, #72]	; (8001310 <MX_GPIO_Init+0xbc>)
 80012c8:	f000 fab2 	bl	8001830 <HAL_GPIO_Init>

  /*Configure GPIO pins : a_Pin b_Pin c_Pin d_Pin
                           e_Pin f_Pin g_Pin */
  GPIO_InitStruct.Pin = a_Pin|b_Pin|c_Pin|d_Pin
 80012cc:	237f      	movs	r3, #127	; 0x7f
 80012ce:	60bb      	str	r3, [r7, #8]
                          |e_Pin|f_Pin|g_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d0:	2301      	movs	r3, #1
 80012d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d8:	2302      	movs	r3, #2
 80012da:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012dc:	f107 0308 	add.w	r3, r7, #8
 80012e0:	4619      	mov	r1, r3
 80012e2:	480c      	ldr	r0, [pc, #48]	; (8001314 <MX_GPIO_Init+0xc0>)
 80012e4:	f000 faa4 	bl	8001830 <HAL_GPIO_Init>

  /*Configure GPIO pins : SELECT_Pin UP_Pin B_SET_Pin */
  GPIO_InitStruct.Pin = SELECT_Pin|UP_Pin|B_SET_Pin;
 80012e8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80012ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012ee:	2300      	movs	r3, #0
 80012f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012f2:	2301      	movs	r3, #1
 80012f4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f6:	f107 0308 	add.w	r3, r7, #8
 80012fa:	4619      	mov	r1, r3
 80012fc:	4804      	ldr	r0, [pc, #16]	; (8001310 <MX_GPIO_Init+0xbc>)
 80012fe:	f000 fa97 	bl	8001830 <HAL_GPIO_Init>

}
 8001302:	bf00      	nop
 8001304:	3718      	adds	r7, #24
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40021000 	.word	0x40021000
 8001310:	40010800 	.word	0x40010800
 8001314:	40010c00 	.word	0x40010c00

08001318 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
	timerRun();
 8001320:	f000 f834 	bl	800138c <timerRun>
	getKeyInput();
 8001324:	f7fe ff8e 	bl	8000244 <getKeyInput>
}
 8001328:	bf00      	nop
 800132a:	3708      	adds	r7, #8
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}

08001330 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001334:	b672      	cpsid	i
}
 8001336:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001338:	e7fe      	b.n	8001338 <Error_Handler+0x8>
	...

0800133c <setTimer1>:
int timer1_counter = 0;
int timer1_flag = 0;
int timer2_counter = 0;
int timer2_flag = 0;

void setTimer1(int duration){
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/TICK;
 8001344:	4a05      	ldr	r2, [pc, #20]	; (800135c <setTimer1+0x20>)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 800134a:	4b05      	ldr	r3, [pc, #20]	; (8001360 <setTimer1+0x24>)
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
}
 8001350:	bf00      	nop
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	bc80      	pop	{r7}
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	200000a4 	.word	0x200000a4
 8001360:	200000a8 	.word	0x200000a8

08001364 <setTimer2>:
void setTimer2(int duration){
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/TICK;
 800136c:	4a05      	ldr	r2, [pc, #20]	; (8001384 <setTimer2+0x20>)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8001372:	4b05      	ldr	r3, [pc, #20]	; (8001388 <setTimer2+0x24>)
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
}
 8001378:	bf00      	nop
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	bc80      	pop	{r7}
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	200000ac 	.word	0x200000ac
 8001388:	200000b0 	.word	0x200000b0

0800138c <timerRun>:

void timerRun(){
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 8001390:	4b11      	ldr	r3, [pc, #68]	; (80013d8 <timerRun+0x4c>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2b00      	cmp	r3, #0
 8001396:	dd0b      	ble.n	80013b0 <timerRun+0x24>
		timer1_counter--;
 8001398:	4b0f      	ldr	r3, [pc, #60]	; (80013d8 <timerRun+0x4c>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	3b01      	subs	r3, #1
 800139e:	4a0e      	ldr	r2, [pc, #56]	; (80013d8 <timerRun+0x4c>)
 80013a0:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0) {
 80013a2:	4b0d      	ldr	r3, [pc, #52]	; (80013d8 <timerRun+0x4c>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	dc02      	bgt.n	80013b0 <timerRun+0x24>
			timer1_flag = 1;
 80013aa:	4b0c      	ldr	r3, [pc, #48]	; (80013dc <timerRun+0x50>)
 80013ac:	2201      	movs	r2, #1
 80013ae:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer2_counter > 0){
 80013b0:	4b0b      	ldr	r3, [pc, #44]	; (80013e0 <timerRun+0x54>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	dd0b      	ble.n	80013d0 <timerRun+0x44>
			timer2_counter--;
 80013b8:	4b09      	ldr	r3, [pc, #36]	; (80013e0 <timerRun+0x54>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	3b01      	subs	r3, #1
 80013be:	4a08      	ldr	r2, [pc, #32]	; (80013e0 <timerRun+0x54>)
 80013c0:	6013      	str	r3, [r2, #0]
			if(timer2_counter <= 0) {
 80013c2:	4b07      	ldr	r3, [pc, #28]	; (80013e0 <timerRun+0x54>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	dc02      	bgt.n	80013d0 <timerRun+0x44>
				timer2_flag = 1;
 80013ca:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <timerRun+0x58>)
 80013cc:	2201      	movs	r2, #1
 80013ce:	601a      	str	r2, [r3, #0]
			}
		}
}
 80013d0:	bf00      	nop
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bc80      	pop	{r7}
 80013d6:	4770      	bx	lr
 80013d8:	200000a4 	.word	0x200000a4
 80013dc:	200000a8 	.word	0x200000a8
 80013e0:	200000ac 	.word	0x200000ac
 80013e4:	200000b0 	.word	0x200000b0

080013e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b085      	sub	sp, #20
 80013ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80013ee:	4b15      	ldr	r3, [pc, #84]	; (8001444 <HAL_MspInit+0x5c>)
 80013f0:	699b      	ldr	r3, [r3, #24]
 80013f2:	4a14      	ldr	r2, [pc, #80]	; (8001444 <HAL_MspInit+0x5c>)
 80013f4:	f043 0301 	orr.w	r3, r3, #1
 80013f8:	6193      	str	r3, [r2, #24]
 80013fa:	4b12      	ldr	r3, [pc, #72]	; (8001444 <HAL_MspInit+0x5c>)
 80013fc:	699b      	ldr	r3, [r3, #24]
 80013fe:	f003 0301 	and.w	r3, r3, #1
 8001402:	60bb      	str	r3, [r7, #8]
 8001404:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001406:	4b0f      	ldr	r3, [pc, #60]	; (8001444 <HAL_MspInit+0x5c>)
 8001408:	69db      	ldr	r3, [r3, #28]
 800140a:	4a0e      	ldr	r2, [pc, #56]	; (8001444 <HAL_MspInit+0x5c>)
 800140c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001410:	61d3      	str	r3, [r2, #28]
 8001412:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <HAL_MspInit+0x5c>)
 8001414:	69db      	ldr	r3, [r3, #28]
 8001416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800141a:	607b      	str	r3, [r7, #4]
 800141c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800141e:	4b0a      	ldr	r3, [pc, #40]	; (8001448 <HAL_MspInit+0x60>)
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	4a04      	ldr	r2, [pc, #16]	; (8001448 <HAL_MspInit+0x60>)
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800143a:	bf00      	nop
 800143c:	3714      	adds	r7, #20
 800143e:	46bd      	mov	sp, r7
 8001440:	bc80      	pop	{r7}
 8001442:	4770      	bx	lr
 8001444:	40021000 	.word	0x40021000
 8001448:	40010000 	.word	0x40010000

0800144c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800145c:	d113      	bne.n	8001486 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800145e:	4b0c      	ldr	r3, [pc, #48]	; (8001490 <HAL_TIM_Base_MspInit+0x44>)
 8001460:	69db      	ldr	r3, [r3, #28]
 8001462:	4a0b      	ldr	r2, [pc, #44]	; (8001490 <HAL_TIM_Base_MspInit+0x44>)
 8001464:	f043 0301 	orr.w	r3, r3, #1
 8001468:	61d3      	str	r3, [r2, #28]
 800146a:	4b09      	ldr	r3, [pc, #36]	; (8001490 <HAL_TIM_Base_MspInit+0x44>)
 800146c:	69db      	ldr	r3, [r3, #28]
 800146e:	f003 0301 	and.w	r3, r3, #1
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001476:	2200      	movs	r2, #0
 8001478:	2100      	movs	r1, #0
 800147a:	201c      	movs	r0, #28
 800147c:	f000 f9a1 	bl	80017c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001480:	201c      	movs	r0, #28
 8001482:	f000 f9ba 	bl	80017fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001486:	bf00      	nop
 8001488:	3710      	adds	r7, #16
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	40021000 	.word	0x40021000

08001494 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001498:	e7fe      	b.n	8001498 <NMI_Handler+0x4>

0800149a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800149a:	b480      	push	{r7}
 800149c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800149e:	e7fe      	b.n	800149e <HardFault_Handler+0x4>

080014a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014a4:	e7fe      	b.n	80014a4 <MemManage_Handler+0x4>

080014a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014a6:	b480      	push	{r7}
 80014a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014aa:	e7fe      	b.n	80014aa <BusFault_Handler+0x4>

080014ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014b0:	e7fe      	b.n	80014b0 <UsageFault_Handler+0x4>

080014b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014b2:	b480      	push	{r7}
 80014b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014b6:	bf00      	nop
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bc80      	pop	{r7}
 80014bc:	4770      	bx	lr

080014be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014be:	b480      	push	{r7}
 80014c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014c2:	bf00      	nop
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bc80      	pop	{r7}
 80014c8:	4770      	bx	lr

080014ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014ca:	b480      	push	{r7}
 80014cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014ce:	bf00      	nop
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bc80      	pop	{r7}
 80014d4:	4770      	bx	lr

080014d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014d6:	b580      	push	{r7, lr}
 80014d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014da:	f000 f87f 	bl	80015dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014de:	bf00      	nop
 80014e0:	bd80      	pop	{r7, pc}
	...

080014e4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80014e8:	4802      	ldr	r0, [pc, #8]	; (80014f4 <TIM2_IRQHandler+0x10>)
 80014ea:	f000 ffe7 	bl	80024bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	200000b4 	.word	0x200000b4

080014f8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014fc:	bf00      	nop
 80014fe:	46bd      	mov	sp, r7
 8001500:	bc80      	pop	{r7}
 8001502:	4770      	bx	lr

08001504 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001504:	480c      	ldr	r0, [pc, #48]	; (8001538 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001506:	490d      	ldr	r1, [pc, #52]	; (800153c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001508:	4a0d      	ldr	r2, [pc, #52]	; (8001540 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800150a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800150c:	e002      	b.n	8001514 <LoopCopyDataInit>

0800150e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800150e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001510:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001512:	3304      	adds	r3, #4

08001514 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001514:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001516:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001518:	d3f9      	bcc.n	800150e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800151a:	4a0a      	ldr	r2, [pc, #40]	; (8001544 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800151c:	4c0a      	ldr	r4, [pc, #40]	; (8001548 <LoopFillZerobss+0x22>)
  movs r3, #0
 800151e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001520:	e001      	b.n	8001526 <LoopFillZerobss>

08001522 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001522:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001524:	3204      	adds	r2, #4

08001526 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001526:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001528:	d3fb      	bcc.n	8001522 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800152a:	f7ff ffe5 	bl	80014f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800152e:	f001 fb0d 	bl	8002b4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001532:	f7ff fde5 	bl	8001100 <main>
  bx lr
 8001536:	4770      	bx	lr
  ldr r0, =_sdata
 8001538:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800153c:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 8001540:	08002be4 	.word	0x08002be4
  ldr r2, =_sbss
 8001544:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 8001548:	20000100 	.word	0x20000100

0800154c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800154c:	e7fe      	b.n	800154c <ADC1_2_IRQHandler>
	...

08001550 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001554:	4b08      	ldr	r3, [pc, #32]	; (8001578 <HAL_Init+0x28>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a07      	ldr	r2, [pc, #28]	; (8001578 <HAL_Init+0x28>)
 800155a:	f043 0310 	orr.w	r3, r3, #16
 800155e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001560:	2003      	movs	r0, #3
 8001562:	f000 f923 	bl	80017ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001566:	200f      	movs	r0, #15
 8001568:	f000 f808 	bl	800157c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800156c:	f7ff ff3c 	bl	80013e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001570:	2300      	movs	r3, #0
}
 8001572:	4618      	mov	r0, r3
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	40022000 	.word	0x40022000

0800157c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001584:	4b12      	ldr	r3, [pc, #72]	; (80015d0 <HAL_InitTick+0x54>)
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	4b12      	ldr	r3, [pc, #72]	; (80015d4 <HAL_InitTick+0x58>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	4619      	mov	r1, r3
 800158e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001592:	fbb3 f3f1 	udiv	r3, r3, r1
 8001596:	fbb2 f3f3 	udiv	r3, r2, r3
 800159a:	4618      	mov	r0, r3
 800159c:	f000 f93b 	bl	8001816 <HAL_SYSTICK_Config>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e00e      	b.n	80015c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2b0f      	cmp	r3, #15
 80015ae:	d80a      	bhi.n	80015c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015b0:	2200      	movs	r2, #0
 80015b2:	6879      	ldr	r1, [r7, #4]
 80015b4:	f04f 30ff 	mov.w	r0, #4294967295
 80015b8:	f000 f903 	bl	80017c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015bc:	4a06      	ldr	r2, [pc, #24]	; (80015d8 <HAL_InitTick+0x5c>)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015c2:	2300      	movs	r3, #0
 80015c4:	e000      	b.n	80015c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	20000044 	.word	0x20000044
 80015d4:	2000004c 	.word	0x2000004c
 80015d8:	20000048 	.word	0x20000048

080015dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015e0:	4b05      	ldr	r3, [pc, #20]	; (80015f8 <HAL_IncTick+0x1c>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	461a      	mov	r2, r3
 80015e6:	4b05      	ldr	r3, [pc, #20]	; (80015fc <HAL_IncTick+0x20>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4413      	add	r3, r2
 80015ec:	4a03      	ldr	r2, [pc, #12]	; (80015fc <HAL_IncTick+0x20>)
 80015ee:	6013      	str	r3, [r2, #0]
}
 80015f0:	bf00      	nop
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bc80      	pop	{r7}
 80015f6:	4770      	bx	lr
 80015f8:	2000004c 	.word	0x2000004c
 80015fc:	200000fc 	.word	0x200000fc

08001600 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  return uwTick;
 8001604:	4b02      	ldr	r3, [pc, #8]	; (8001610 <HAL_GetTick+0x10>)
 8001606:	681b      	ldr	r3, [r3, #0]
}
 8001608:	4618      	mov	r0, r3
 800160a:	46bd      	mov	sp, r7
 800160c:	bc80      	pop	{r7}
 800160e:	4770      	bx	lr
 8001610:	200000fc 	.word	0x200000fc

08001614 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001614:	b480      	push	{r7}
 8001616:	b085      	sub	sp, #20
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f003 0307 	and.w	r3, r3, #7
 8001622:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001624:	4b0c      	ldr	r3, [pc, #48]	; (8001658 <__NVIC_SetPriorityGrouping+0x44>)
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800162a:	68ba      	ldr	r2, [r7, #8]
 800162c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001630:	4013      	ands	r3, r2
 8001632:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800163c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001640:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001644:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001646:	4a04      	ldr	r2, [pc, #16]	; (8001658 <__NVIC_SetPriorityGrouping+0x44>)
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	60d3      	str	r3, [r2, #12]
}
 800164c:	bf00      	nop
 800164e:	3714      	adds	r7, #20
 8001650:	46bd      	mov	sp, r7
 8001652:	bc80      	pop	{r7}
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	e000ed00 	.word	0xe000ed00

0800165c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001660:	4b04      	ldr	r3, [pc, #16]	; (8001674 <__NVIC_GetPriorityGrouping+0x18>)
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	0a1b      	lsrs	r3, r3, #8
 8001666:	f003 0307 	and.w	r3, r3, #7
}
 800166a:	4618      	mov	r0, r3
 800166c:	46bd      	mov	sp, r7
 800166e:	bc80      	pop	{r7}
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	e000ed00 	.word	0xe000ed00

08001678 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	4603      	mov	r3, r0
 8001680:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001686:	2b00      	cmp	r3, #0
 8001688:	db0b      	blt.n	80016a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800168a:	79fb      	ldrb	r3, [r7, #7]
 800168c:	f003 021f 	and.w	r2, r3, #31
 8001690:	4906      	ldr	r1, [pc, #24]	; (80016ac <__NVIC_EnableIRQ+0x34>)
 8001692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001696:	095b      	lsrs	r3, r3, #5
 8001698:	2001      	movs	r0, #1
 800169a:	fa00 f202 	lsl.w	r2, r0, r2
 800169e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016a2:	bf00      	nop
 80016a4:	370c      	adds	r7, #12
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bc80      	pop	{r7}
 80016aa:	4770      	bx	lr
 80016ac:	e000e100 	.word	0xe000e100

080016b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	4603      	mov	r3, r0
 80016b8:	6039      	str	r1, [r7, #0]
 80016ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	db0a      	blt.n	80016da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	b2da      	uxtb	r2, r3
 80016c8:	490c      	ldr	r1, [pc, #48]	; (80016fc <__NVIC_SetPriority+0x4c>)
 80016ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ce:	0112      	lsls	r2, r2, #4
 80016d0:	b2d2      	uxtb	r2, r2
 80016d2:	440b      	add	r3, r1
 80016d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016d8:	e00a      	b.n	80016f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	b2da      	uxtb	r2, r3
 80016de:	4908      	ldr	r1, [pc, #32]	; (8001700 <__NVIC_SetPriority+0x50>)
 80016e0:	79fb      	ldrb	r3, [r7, #7]
 80016e2:	f003 030f 	and.w	r3, r3, #15
 80016e6:	3b04      	subs	r3, #4
 80016e8:	0112      	lsls	r2, r2, #4
 80016ea:	b2d2      	uxtb	r2, r2
 80016ec:	440b      	add	r3, r1
 80016ee:	761a      	strb	r2, [r3, #24]
}
 80016f0:	bf00      	nop
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bc80      	pop	{r7}
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	e000e100 	.word	0xe000e100
 8001700:	e000ed00 	.word	0xe000ed00

08001704 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001704:	b480      	push	{r7}
 8001706:	b089      	sub	sp, #36	; 0x24
 8001708:	af00      	add	r7, sp, #0
 800170a:	60f8      	str	r0, [r7, #12]
 800170c:	60b9      	str	r1, [r7, #8]
 800170e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	f003 0307 	and.w	r3, r3, #7
 8001716:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	f1c3 0307 	rsb	r3, r3, #7
 800171e:	2b04      	cmp	r3, #4
 8001720:	bf28      	it	cs
 8001722:	2304      	movcs	r3, #4
 8001724:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	3304      	adds	r3, #4
 800172a:	2b06      	cmp	r3, #6
 800172c:	d902      	bls.n	8001734 <NVIC_EncodePriority+0x30>
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	3b03      	subs	r3, #3
 8001732:	e000      	b.n	8001736 <NVIC_EncodePriority+0x32>
 8001734:	2300      	movs	r3, #0
 8001736:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001738:	f04f 32ff 	mov.w	r2, #4294967295
 800173c:	69bb      	ldr	r3, [r7, #24]
 800173e:	fa02 f303 	lsl.w	r3, r2, r3
 8001742:	43da      	mvns	r2, r3
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	401a      	ands	r2, r3
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800174c:	f04f 31ff 	mov.w	r1, #4294967295
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	fa01 f303 	lsl.w	r3, r1, r3
 8001756:	43d9      	mvns	r1, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800175c:	4313      	orrs	r3, r2
         );
}
 800175e:	4618      	mov	r0, r3
 8001760:	3724      	adds	r7, #36	; 0x24
 8001762:	46bd      	mov	sp, r7
 8001764:	bc80      	pop	{r7}
 8001766:	4770      	bx	lr

08001768 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	3b01      	subs	r3, #1
 8001774:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001778:	d301      	bcc.n	800177e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800177a:	2301      	movs	r3, #1
 800177c:	e00f      	b.n	800179e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800177e:	4a0a      	ldr	r2, [pc, #40]	; (80017a8 <SysTick_Config+0x40>)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	3b01      	subs	r3, #1
 8001784:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001786:	210f      	movs	r1, #15
 8001788:	f04f 30ff 	mov.w	r0, #4294967295
 800178c:	f7ff ff90 	bl	80016b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001790:	4b05      	ldr	r3, [pc, #20]	; (80017a8 <SysTick_Config+0x40>)
 8001792:	2200      	movs	r2, #0
 8001794:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001796:	4b04      	ldr	r3, [pc, #16]	; (80017a8 <SysTick_Config+0x40>)
 8001798:	2207      	movs	r2, #7
 800179a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800179c:	2300      	movs	r3, #0
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	e000e010 	.word	0xe000e010

080017ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f7ff ff2d 	bl	8001614 <__NVIC_SetPriorityGrouping>
}
 80017ba:	bf00      	nop
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}

080017c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017c2:	b580      	push	{r7, lr}
 80017c4:	b086      	sub	sp, #24
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	4603      	mov	r3, r0
 80017ca:	60b9      	str	r1, [r7, #8]
 80017cc:	607a      	str	r2, [r7, #4]
 80017ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017d0:	2300      	movs	r3, #0
 80017d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017d4:	f7ff ff42 	bl	800165c <__NVIC_GetPriorityGrouping>
 80017d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	68b9      	ldr	r1, [r7, #8]
 80017de:	6978      	ldr	r0, [r7, #20]
 80017e0:	f7ff ff90 	bl	8001704 <NVIC_EncodePriority>
 80017e4:	4602      	mov	r2, r0
 80017e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017ea:	4611      	mov	r1, r2
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7ff ff5f 	bl	80016b0 <__NVIC_SetPriority>
}
 80017f2:	bf00      	nop
 80017f4:	3718      	adds	r7, #24
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}

080017fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017fa:	b580      	push	{r7, lr}
 80017fc:	b082      	sub	sp, #8
 80017fe:	af00      	add	r7, sp, #0
 8001800:	4603      	mov	r3, r0
 8001802:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001808:	4618      	mov	r0, r3
 800180a:	f7ff ff35 	bl	8001678 <__NVIC_EnableIRQ>
}
 800180e:	bf00      	nop
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}

08001816 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001816:	b580      	push	{r7, lr}
 8001818:	b082      	sub	sp, #8
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f7ff ffa2 	bl	8001768 <SysTick_Config>
 8001824:	4603      	mov	r3, r0
}
 8001826:	4618      	mov	r0, r3
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
	...

08001830 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001830:	b480      	push	{r7}
 8001832:	b08b      	sub	sp, #44	; 0x2c
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800183a:	2300      	movs	r3, #0
 800183c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800183e:	2300      	movs	r3, #0
 8001840:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001842:	e148      	b.n	8001ad6 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001844:	2201      	movs	r2, #1
 8001846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	69fa      	ldr	r2, [r7, #28]
 8001854:	4013      	ands	r3, r2
 8001856:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	429a      	cmp	r2, r3
 800185e:	f040 8137 	bne.w	8001ad0 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	4aa3      	ldr	r2, [pc, #652]	; (8001af4 <HAL_GPIO_Init+0x2c4>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d05e      	beq.n	800192a <HAL_GPIO_Init+0xfa>
 800186c:	4aa1      	ldr	r2, [pc, #644]	; (8001af4 <HAL_GPIO_Init+0x2c4>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d875      	bhi.n	800195e <HAL_GPIO_Init+0x12e>
 8001872:	4aa1      	ldr	r2, [pc, #644]	; (8001af8 <HAL_GPIO_Init+0x2c8>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d058      	beq.n	800192a <HAL_GPIO_Init+0xfa>
 8001878:	4a9f      	ldr	r2, [pc, #636]	; (8001af8 <HAL_GPIO_Init+0x2c8>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d86f      	bhi.n	800195e <HAL_GPIO_Init+0x12e>
 800187e:	4a9f      	ldr	r2, [pc, #636]	; (8001afc <HAL_GPIO_Init+0x2cc>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d052      	beq.n	800192a <HAL_GPIO_Init+0xfa>
 8001884:	4a9d      	ldr	r2, [pc, #628]	; (8001afc <HAL_GPIO_Init+0x2cc>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d869      	bhi.n	800195e <HAL_GPIO_Init+0x12e>
 800188a:	4a9d      	ldr	r2, [pc, #628]	; (8001b00 <HAL_GPIO_Init+0x2d0>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d04c      	beq.n	800192a <HAL_GPIO_Init+0xfa>
 8001890:	4a9b      	ldr	r2, [pc, #620]	; (8001b00 <HAL_GPIO_Init+0x2d0>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d863      	bhi.n	800195e <HAL_GPIO_Init+0x12e>
 8001896:	4a9b      	ldr	r2, [pc, #620]	; (8001b04 <HAL_GPIO_Init+0x2d4>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d046      	beq.n	800192a <HAL_GPIO_Init+0xfa>
 800189c:	4a99      	ldr	r2, [pc, #612]	; (8001b04 <HAL_GPIO_Init+0x2d4>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d85d      	bhi.n	800195e <HAL_GPIO_Init+0x12e>
 80018a2:	2b12      	cmp	r3, #18
 80018a4:	d82a      	bhi.n	80018fc <HAL_GPIO_Init+0xcc>
 80018a6:	2b12      	cmp	r3, #18
 80018a8:	d859      	bhi.n	800195e <HAL_GPIO_Init+0x12e>
 80018aa:	a201      	add	r2, pc, #4	; (adr r2, 80018b0 <HAL_GPIO_Init+0x80>)
 80018ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018b0:	0800192b 	.word	0x0800192b
 80018b4:	08001905 	.word	0x08001905
 80018b8:	08001917 	.word	0x08001917
 80018bc:	08001959 	.word	0x08001959
 80018c0:	0800195f 	.word	0x0800195f
 80018c4:	0800195f 	.word	0x0800195f
 80018c8:	0800195f 	.word	0x0800195f
 80018cc:	0800195f 	.word	0x0800195f
 80018d0:	0800195f 	.word	0x0800195f
 80018d4:	0800195f 	.word	0x0800195f
 80018d8:	0800195f 	.word	0x0800195f
 80018dc:	0800195f 	.word	0x0800195f
 80018e0:	0800195f 	.word	0x0800195f
 80018e4:	0800195f 	.word	0x0800195f
 80018e8:	0800195f 	.word	0x0800195f
 80018ec:	0800195f 	.word	0x0800195f
 80018f0:	0800195f 	.word	0x0800195f
 80018f4:	0800190d 	.word	0x0800190d
 80018f8:	08001921 	.word	0x08001921
 80018fc:	4a82      	ldr	r2, [pc, #520]	; (8001b08 <HAL_GPIO_Init+0x2d8>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d013      	beq.n	800192a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001902:	e02c      	b.n	800195e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	623b      	str	r3, [r7, #32]
          break;
 800190a:	e029      	b.n	8001960 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	3304      	adds	r3, #4
 8001912:	623b      	str	r3, [r7, #32]
          break;
 8001914:	e024      	b.n	8001960 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	68db      	ldr	r3, [r3, #12]
 800191a:	3308      	adds	r3, #8
 800191c:	623b      	str	r3, [r7, #32]
          break;
 800191e:	e01f      	b.n	8001960 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	330c      	adds	r3, #12
 8001926:	623b      	str	r3, [r7, #32]
          break;
 8001928:	e01a      	b.n	8001960 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d102      	bne.n	8001938 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001932:	2304      	movs	r3, #4
 8001934:	623b      	str	r3, [r7, #32]
          break;
 8001936:	e013      	b.n	8001960 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	2b01      	cmp	r3, #1
 800193e:	d105      	bne.n	800194c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001940:	2308      	movs	r3, #8
 8001942:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	69fa      	ldr	r2, [r7, #28]
 8001948:	611a      	str	r2, [r3, #16]
          break;
 800194a:	e009      	b.n	8001960 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800194c:	2308      	movs	r3, #8
 800194e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	69fa      	ldr	r2, [r7, #28]
 8001954:	615a      	str	r2, [r3, #20]
          break;
 8001956:	e003      	b.n	8001960 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001958:	2300      	movs	r3, #0
 800195a:	623b      	str	r3, [r7, #32]
          break;
 800195c:	e000      	b.n	8001960 <HAL_GPIO_Init+0x130>
          break;
 800195e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	2bff      	cmp	r3, #255	; 0xff
 8001964:	d801      	bhi.n	800196a <HAL_GPIO_Init+0x13a>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	e001      	b.n	800196e <HAL_GPIO_Init+0x13e>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	3304      	adds	r3, #4
 800196e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001970:	69bb      	ldr	r3, [r7, #24]
 8001972:	2bff      	cmp	r3, #255	; 0xff
 8001974:	d802      	bhi.n	800197c <HAL_GPIO_Init+0x14c>
 8001976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	e002      	b.n	8001982 <HAL_GPIO_Init+0x152>
 800197c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197e:	3b08      	subs	r3, #8
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	210f      	movs	r1, #15
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	fa01 f303 	lsl.w	r3, r1, r3
 8001990:	43db      	mvns	r3, r3
 8001992:	401a      	ands	r2, r3
 8001994:	6a39      	ldr	r1, [r7, #32]
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	fa01 f303 	lsl.w	r3, r1, r3
 800199c:	431a      	orrs	r2, r3
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	f000 8090 	beq.w	8001ad0 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019b0:	4b56      	ldr	r3, [pc, #344]	; (8001b0c <HAL_GPIO_Init+0x2dc>)
 80019b2:	699b      	ldr	r3, [r3, #24]
 80019b4:	4a55      	ldr	r2, [pc, #340]	; (8001b0c <HAL_GPIO_Init+0x2dc>)
 80019b6:	f043 0301 	orr.w	r3, r3, #1
 80019ba:	6193      	str	r3, [r2, #24]
 80019bc:	4b53      	ldr	r3, [pc, #332]	; (8001b0c <HAL_GPIO_Init+0x2dc>)
 80019be:	699b      	ldr	r3, [r3, #24]
 80019c0:	f003 0301 	and.w	r3, r3, #1
 80019c4:	60bb      	str	r3, [r7, #8]
 80019c6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80019c8:	4a51      	ldr	r2, [pc, #324]	; (8001b10 <HAL_GPIO_Init+0x2e0>)
 80019ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019cc:	089b      	lsrs	r3, r3, #2
 80019ce:	3302      	adds	r3, #2
 80019d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019d4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d8:	f003 0303 	and.w	r3, r3, #3
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	220f      	movs	r2, #15
 80019e0:	fa02 f303 	lsl.w	r3, r2, r3
 80019e4:	43db      	mvns	r3, r3
 80019e6:	68fa      	ldr	r2, [r7, #12]
 80019e8:	4013      	ands	r3, r2
 80019ea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	4a49      	ldr	r2, [pc, #292]	; (8001b14 <HAL_GPIO_Init+0x2e4>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d00d      	beq.n	8001a10 <HAL_GPIO_Init+0x1e0>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	4a48      	ldr	r2, [pc, #288]	; (8001b18 <HAL_GPIO_Init+0x2e8>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d007      	beq.n	8001a0c <HAL_GPIO_Init+0x1dc>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	4a47      	ldr	r2, [pc, #284]	; (8001b1c <HAL_GPIO_Init+0x2ec>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d101      	bne.n	8001a08 <HAL_GPIO_Init+0x1d8>
 8001a04:	2302      	movs	r3, #2
 8001a06:	e004      	b.n	8001a12 <HAL_GPIO_Init+0x1e2>
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e002      	b.n	8001a12 <HAL_GPIO_Init+0x1e2>
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e000      	b.n	8001a12 <HAL_GPIO_Init+0x1e2>
 8001a10:	2300      	movs	r3, #0
 8001a12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a14:	f002 0203 	and.w	r2, r2, #3
 8001a18:	0092      	lsls	r2, r2, #2
 8001a1a:	4093      	lsls	r3, r2
 8001a1c:	68fa      	ldr	r2, [r7, #12]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a22:	493b      	ldr	r1, [pc, #236]	; (8001b10 <HAL_GPIO_Init+0x2e0>)
 8001a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a26:	089b      	lsrs	r3, r3, #2
 8001a28:	3302      	adds	r3, #2
 8001a2a:	68fa      	ldr	r2, [r7, #12]
 8001a2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d006      	beq.n	8001a4a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a3c:	4b38      	ldr	r3, [pc, #224]	; (8001b20 <HAL_GPIO_Init+0x2f0>)
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	4937      	ldr	r1, [pc, #220]	; (8001b20 <HAL_GPIO_Init+0x2f0>)
 8001a42:	69bb      	ldr	r3, [r7, #24]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	600b      	str	r3, [r1, #0]
 8001a48:	e006      	b.n	8001a58 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a4a:	4b35      	ldr	r3, [pc, #212]	; (8001b20 <HAL_GPIO_Init+0x2f0>)
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	43db      	mvns	r3, r3
 8001a52:	4933      	ldr	r1, [pc, #204]	; (8001b20 <HAL_GPIO_Init+0x2f0>)
 8001a54:	4013      	ands	r3, r2
 8001a56:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d006      	beq.n	8001a72 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a64:	4b2e      	ldr	r3, [pc, #184]	; (8001b20 <HAL_GPIO_Init+0x2f0>)
 8001a66:	685a      	ldr	r2, [r3, #4]
 8001a68:	492d      	ldr	r1, [pc, #180]	; (8001b20 <HAL_GPIO_Init+0x2f0>)
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	604b      	str	r3, [r1, #4]
 8001a70:	e006      	b.n	8001a80 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a72:	4b2b      	ldr	r3, [pc, #172]	; (8001b20 <HAL_GPIO_Init+0x2f0>)
 8001a74:	685a      	ldr	r2, [r3, #4]
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	43db      	mvns	r3, r3
 8001a7a:	4929      	ldr	r1, [pc, #164]	; (8001b20 <HAL_GPIO_Init+0x2f0>)
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d006      	beq.n	8001a9a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a8c:	4b24      	ldr	r3, [pc, #144]	; (8001b20 <HAL_GPIO_Init+0x2f0>)
 8001a8e:	689a      	ldr	r2, [r3, #8]
 8001a90:	4923      	ldr	r1, [pc, #140]	; (8001b20 <HAL_GPIO_Init+0x2f0>)
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	608b      	str	r3, [r1, #8]
 8001a98:	e006      	b.n	8001aa8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a9a:	4b21      	ldr	r3, [pc, #132]	; (8001b20 <HAL_GPIO_Init+0x2f0>)
 8001a9c:	689a      	ldr	r2, [r3, #8]
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	43db      	mvns	r3, r3
 8001aa2:	491f      	ldr	r1, [pc, #124]	; (8001b20 <HAL_GPIO_Init+0x2f0>)
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d006      	beq.n	8001ac2 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ab4:	4b1a      	ldr	r3, [pc, #104]	; (8001b20 <HAL_GPIO_Init+0x2f0>)
 8001ab6:	68da      	ldr	r2, [r3, #12]
 8001ab8:	4919      	ldr	r1, [pc, #100]	; (8001b20 <HAL_GPIO_Init+0x2f0>)
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	60cb      	str	r3, [r1, #12]
 8001ac0:	e006      	b.n	8001ad0 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ac2:	4b17      	ldr	r3, [pc, #92]	; (8001b20 <HAL_GPIO_Init+0x2f0>)
 8001ac4:	68da      	ldr	r2, [r3, #12]
 8001ac6:	69bb      	ldr	r3, [r7, #24]
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	4915      	ldr	r1, [pc, #84]	; (8001b20 <HAL_GPIO_Init+0x2f0>)
 8001acc:	4013      	ands	r3, r2
 8001ace:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001adc:	fa22 f303 	lsr.w	r3, r2, r3
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	f47f aeaf 	bne.w	8001844 <HAL_GPIO_Init+0x14>
  }
}
 8001ae6:	bf00      	nop
 8001ae8:	bf00      	nop
 8001aea:	372c      	adds	r7, #44	; 0x2c
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bc80      	pop	{r7}
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	10320000 	.word	0x10320000
 8001af8:	10310000 	.word	0x10310000
 8001afc:	10220000 	.word	0x10220000
 8001b00:	10210000 	.word	0x10210000
 8001b04:	10120000 	.word	0x10120000
 8001b08:	10110000 	.word	0x10110000
 8001b0c:	40021000 	.word	0x40021000
 8001b10:	40010000 	.word	0x40010000
 8001b14:	40010800 	.word	0x40010800
 8001b18:	40010c00 	.word	0x40010c00
 8001b1c:	40011000 	.word	0x40011000
 8001b20:	40010400 	.word	0x40010400

08001b24 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b085      	sub	sp, #20
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	689a      	ldr	r2, [r3, #8]
 8001b34:	887b      	ldrh	r3, [r7, #2]
 8001b36:	4013      	ands	r3, r2
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d002      	beq.n	8001b42 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	73fb      	strb	r3, [r7, #15]
 8001b40:	e001      	b.n	8001b46 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b42:	2300      	movs	r3, #0
 8001b44:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3714      	adds	r7, #20
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bc80      	pop	{r7}
 8001b50:	4770      	bx	lr

08001b52 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b52:	b480      	push	{r7}
 8001b54:	b083      	sub	sp, #12
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	807b      	strh	r3, [r7, #2]
 8001b5e:	4613      	mov	r3, r2
 8001b60:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b62:	787b      	ldrb	r3, [r7, #1]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d003      	beq.n	8001b70 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b68:	887a      	ldrh	r2, [r7, #2]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b6e:	e003      	b.n	8001b78 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b70:	887b      	ldrh	r3, [r7, #2]
 8001b72:	041a      	lsls	r2, r3, #16
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	611a      	str	r2, [r3, #16]
}
 8001b78:	bf00      	nop
 8001b7a:	370c      	adds	r7, #12
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bc80      	pop	{r7}
 8001b80:	4770      	bx	lr

08001b82 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b82:	b480      	push	{r7}
 8001b84:	b085      	sub	sp, #20
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	68db      	ldr	r3, [r3, #12]
 8001b92:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b94:	887a      	ldrh	r2, [r7, #2]
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	4013      	ands	r3, r2
 8001b9a:	041a      	lsls	r2, r3, #16
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	43d9      	mvns	r1, r3
 8001ba0:	887b      	ldrh	r3, [r7, #2]
 8001ba2:	400b      	ands	r3, r1
 8001ba4:	431a      	orrs	r2, r3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	611a      	str	r2, [r3, #16]
}
 8001baa:	bf00      	nop
 8001bac:	3714      	adds	r7, #20
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bc80      	pop	{r7}
 8001bb2:	4770      	bx	lr

08001bb4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b086      	sub	sp, #24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d101      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e26c      	b.n	80020a0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0301 	and.w	r3, r3, #1
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	f000 8087 	beq.w	8001ce2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bd4:	4b92      	ldr	r3, [pc, #584]	; (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f003 030c 	and.w	r3, r3, #12
 8001bdc:	2b04      	cmp	r3, #4
 8001bde:	d00c      	beq.n	8001bfa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001be0:	4b8f      	ldr	r3, [pc, #572]	; (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f003 030c 	and.w	r3, r3, #12
 8001be8:	2b08      	cmp	r3, #8
 8001bea:	d112      	bne.n	8001c12 <HAL_RCC_OscConfig+0x5e>
 8001bec:	4b8c      	ldr	r3, [pc, #560]	; (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bf8:	d10b      	bne.n	8001c12 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bfa:	4b89      	ldr	r3, [pc, #548]	; (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d06c      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x12c>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d168      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e246      	b.n	80020a0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c1a:	d106      	bne.n	8001c2a <HAL_RCC_OscConfig+0x76>
 8001c1c:	4b80      	ldr	r3, [pc, #512]	; (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a7f      	ldr	r2, [pc, #508]	; (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001c22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c26:	6013      	str	r3, [r2, #0]
 8001c28:	e02e      	b.n	8001c88 <HAL_RCC_OscConfig+0xd4>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d10c      	bne.n	8001c4c <HAL_RCC_OscConfig+0x98>
 8001c32:	4b7b      	ldr	r3, [pc, #492]	; (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a7a      	ldr	r2, [pc, #488]	; (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001c38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c3c:	6013      	str	r3, [r2, #0]
 8001c3e:	4b78      	ldr	r3, [pc, #480]	; (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a77      	ldr	r2, [pc, #476]	; (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001c44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c48:	6013      	str	r3, [r2, #0]
 8001c4a:	e01d      	b.n	8001c88 <HAL_RCC_OscConfig+0xd4>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c54:	d10c      	bne.n	8001c70 <HAL_RCC_OscConfig+0xbc>
 8001c56:	4b72      	ldr	r3, [pc, #456]	; (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a71      	ldr	r2, [pc, #452]	; (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001c5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c60:	6013      	str	r3, [r2, #0]
 8001c62:	4b6f      	ldr	r3, [pc, #444]	; (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a6e      	ldr	r2, [pc, #440]	; (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001c68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c6c:	6013      	str	r3, [r2, #0]
 8001c6e:	e00b      	b.n	8001c88 <HAL_RCC_OscConfig+0xd4>
 8001c70:	4b6b      	ldr	r3, [pc, #428]	; (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a6a      	ldr	r2, [pc, #424]	; (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001c76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c7a:	6013      	str	r3, [r2, #0]
 8001c7c:	4b68      	ldr	r3, [pc, #416]	; (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a67      	ldr	r2, [pc, #412]	; (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001c82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c86:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d013      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c90:	f7ff fcb6 	bl	8001600 <HAL_GetTick>
 8001c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c96:	e008      	b.n	8001caa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c98:	f7ff fcb2 	bl	8001600 <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	2b64      	cmp	r3, #100	; 0x64
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e1fa      	b.n	80020a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001caa:	4b5d      	ldr	r3, [pc, #372]	; (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d0f0      	beq.n	8001c98 <HAL_RCC_OscConfig+0xe4>
 8001cb6:	e014      	b.n	8001ce2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb8:	f7ff fca2 	bl	8001600 <HAL_GetTick>
 8001cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cbe:	e008      	b.n	8001cd2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cc0:	f7ff fc9e 	bl	8001600 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b64      	cmp	r3, #100	; 0x64
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e1e6      	b.n	80020a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cd2:	4b53      	ldr	r3, [pc, #332]	; (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d1f0      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x10c>
 8001cde:	e000      	b.n	8001ce2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ce0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0302 	and.w	r3, r3, #2
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d063      	beq.n	8001db6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cee:	4b4c      	ldr	r3, [pc, #304]	; (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f003 030c 	and.w	r3, r3, #12
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d00b      	beq.n	8001d12 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001cfa:	4b49      	ldr	r3, [pc, #292]	; (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f003 030c 	and.w	r3, r3, #12
 8001d02:	2b08      	cmp	r3, #8
 8001d04:	d11c      	bne.n	8001d40 <HAL_RCC_OscConfig+0x18c>
 8001d06:	4b46      	ldr	r3, [pc, #280]	; (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d116      	bne.n	8001d40 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d12:	4b43      	ldr	r3, [pc, #268]	; (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0302 	and.w	r3, r3, #2
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d005      	beq.n	8001d2a <HAL_RCC_OscConfig+0x176>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	691b      	ldr	r3, [r3, #16]
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d001      	beq.n	8001d2a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e1ba      	b.n	80020a0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d2a:	4b3d      	ldr	r3, [pc, #244]	; (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	695b      	ldr	r3, [r3, #20]
 8001d36:	00db      	lsls	r3, r3, #3
 8001d38:	4939      	ldr	r1, [pc, #228]	; (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d3e:	e03a      	b.n	8001db6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	691b      	ldr	r3, [r3, #16]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d020      	beq.n	8001d8a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d48:	4b36      	ldr	r3, [pc, #216]	; (8001e24 <HAL_RCC_OscConfig+0x270>)
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d4e:	f7ff fc57 	bl	8001600 <HAL_GetTick>
 8001d52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d54:	e008      	b.n	8001d68 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d56:	f7ff fc53 	bl	8001600 <HAL_GetTick>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d901      	bls.n	8001d68 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d64:	2303      	movs	r3, #3
 8001d66:	e19b      	b.n	80020a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d68:	4b2d      	ldr	r3, [pc, #180]	; (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0302 	and.w	r3, r3, #2
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d0f0      	beq.n	8001d56 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d74:	4b2a      	ldr	r3, [pc, #168]	; (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	695b      	ldr	r3, [r3, #20]
 8001d80:	00db      	lsls	r3, r3, #3
 8001d82:	4927      	ldr	r1, [pc, #156]	; (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001d84:	4313      	orrs	r3, r2
 8001d86:	600b      	str	r3, [r1, #0]
 8001d88:	e015      	b.n	8001db6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d8a:	4b26      	ldr	r3, [pc, #152]	; (8001e24 <HAL_RCC_OscConfig+0x270>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d90:	f7ff fc36 	bl	8001600 <HAL_GetTick>
 8001d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d96:	e008      	b.n	8001daa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d98:	f7ff fc32 	bl	8001600 <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e17a      	b.n	80020a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001daa:	4b1d      	ldr	r3, [pc, #116]	; (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0302 	and.w	r3, r3, #2
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d1f0      	bne.n	8001d98 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0308 	and.w	r3, r3, #8
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d03a      	beq.n	8001e38 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	699b      	ldr	r3, [r3, #24]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d019      	beq.n	8001dfe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dca:	4b17      	ldr	r3, [pc, #92]	; (8001e28 <HAL_RCC_OscConfig+0x274>)
 8001dcc:	2201      	movs	r2, #1
 8001dce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dd0:	f7ff fc16 	bl	8001600 <HAL_GetTick>
 8001dd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dd6:	e008      	b.n	8001dea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dd8:	f7ff fc12 	bl	8001600 <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d901      	bls.n	8001dea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e15a      	b.n	80020a0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dea:	4b0d      	ldr	r3, [pc, #52]	; (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dee:	f003 0302 	and.w	r3, r3, #2
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d0f0      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001df6:	2001      	movs	r0, #1
 8001df8:	f000 faa6 	bl	8002348 <RCC_Delay>
 8001dfc:	e01c      	b.n	8001e38 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dfe:	4b0a      	ldr	r3, [pc, #40]	; (8001e28 <HAL_RCC_OscConfig+0x274>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e04:	f7ff fbfc 	bl	8001600 <HAL_GetTick>
 8001e08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e0a:	e00f      	b.n	8001e2c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e0c:	f7ff fbf8 	bl	8001600 <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d908      	bls.n	8001e2c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e140      	b.n	80020a0 <HAL_RCC_OscConfig+0x4ec>
 8001e1e:	bf00      	nop
 8001e20:	40021000 	.word	0x40021000
 8001e24:	42420000 	.word	0x42420000
 8001e28:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e2c:	4b9e      	ldr	r3, [pc, #632]	; (80020a8 <HAL_RCC_OscConfig+0x4f4>)
 8001e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e30:	f003 0302 	and.w	r3, r3, #2
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d1e9      	bne.n	8001e0c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0304 	and.w	r3, r3, #4
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	f000 80a6 	beq.w	8001f92 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e46:	2300      	movs	r3, #0
 8001e48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e4a:	4b97      	ldr	r3, [pc, #604]	; (80020a8 <HAL_RCC_OscConfig+0x4f4>)
 8001e4c:	69db      	ldr	r3, [r3, #28]
 8001e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d10d      	bne.n	8001e72 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e56:	4b94      	ldr	r3, [pc, #592]	; (80020a8 <HAL_RCC_OscConfig+0x4f4>)
 8001e58:	69db      	ldr	r3, [r3, #28]
 8001e5a:	4a93      	ldr	r2, [pc, #588]	; (80020a8 <HAL_RCC_OscConfig+0x4f4>)
 8001e5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e60:	61d3      	str	r3, [r2, #28]
 8001e62:	4b91      	ldr	r3, [pc, #580]	; (80020a8 <HAL_RCC_OscConfig+0x4f4>)
 8001e64:	69db      	ldr	r3, [r3, #28]
 8001e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e6a:	60bb      	str	r3, [r7, #8]
 8001e6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e72:	4b8e      	ldr	r3, [pc, #568]	; (80020ac <HAL_RCC_OscConfig+0x4f8>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d118      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e7e:	4b8b      	ldr	r3, [pc, #556]	; (80020ac <HAL_RCC_OscConfig+0x4f8>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a8a      	ldr	r2, [pc, #552]	; (80020ac <HAL_RCC_OscConfig+0x4f8>)
 8001e84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e8a:	f7ff fbb9 	bl	8001600 <HAL_GetTick>
 8001e8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e90:	e008      	b.n	8001ea4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e92:	f7ff fbb5 	bl	8001600 <HAL_GetTick>
 8001e96:	4602      	mov	r2, r0
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	2b64      	cmp	r3, #100	; 0x64
 8001e9e:	d901      	bls.n	8001ea4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	e0fd      	b.n	80020a0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ea4:	4b81      	ldr	r3, [pc, #516]	; (80020ac <HAL_RCC_OscConfig+0x4f8>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d0f0      	beq.n	8001e92 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d106      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x312>
 8001eb8:	4b7b      	ldr	r3, [pc, #492]	; (80020a8 <HAL_RCC_OscConfig+0x4f4>)
 8001eba:	6a1b      	ldr	r3, [r3, #32]
 8001ebc:	4a7a      	ldr	r2, [pc, #488]	; (80020a8 <HAL_RCC_OscConfig+0x4f4>)
 8001ebe:	f043 0301 	orr.w	r3, r3, #1
 8001ec2:	6213      	str	r3, [r2, #32]
 8001ec4:	e02d      	b.n	8001f22 <HAL_RCC_OscConfig+0x36e>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d10c      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x334>
 8001ece:	4b76      	ldr	r3, [pc, #472]	; (80020a8 <HAL_RCC_OscConfig+0x4f4>)
 8001ed0:	6a1b      	ldr	r3, [r3, #32]
 8001ed2:	4a75      	ldr	r2, [pc, #468]	; (80020a8 <HAL_RCC_OscConfig+0x4f4>)
 8001ed4:	f023 0301 	bic.w	r3, r3, #1
 8001ed8:	6213      	str	r3, [r2, #32]
 8001eda:	4b73      	ldr	r3, [pc, #460]	; (80020a8 <HAL_RCC_OscConfig+0x4f4>)
 8001edc:	6a1b      	ldr	r3, [r3, #32]
 8001ede:	4a72      	ldr	r2, [pc, #456]	; (80020a8 <HAL_RCC_OscConfig+0x4f4>)
 8001ee0:	f023 0304 	bic.w	r3, r3, #4
 8001ee4:	6213      	str	r3, [r2, #32]
 8001ee6:	e01c      	b.n	8001f22 <HAL_RCC_OscConfig+0x36e>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	2b05      	cmp	r3, #5
 8001eee:	d10c      	bne.n	8001f0a <HAL_RCC_OscConfig+0x356>
 8001ef0:	4b6d      	ldr	r3, [pc, #436]	; (80020a8 <HAL_RCC_OscConfig+0x4f4>)
 8001ef2:	6a1b      	ldr	r3, [r3, #32]
 8001ef4:	4a6c      	ldr	r2, [pc, #432]	; (80020a8 <HAL_RCC_OscConfig+0x4f4>)
 8001ef6:	f043 0304 	orr.w	r3, r3, #4
 8001efa:	6213      	str	r3, [r2, #32]
 8001efc:	4b6a      	ldr	r3, [pc, #424]	; (80020a8 <HAL_RCC_OscConfig+0x4f4>)
 8001efe:	6a1b      	ldr	r3, [r3, #32]
 8001f00:	4a69      	ldr	r2, [pc, #420]	; (80020a8 <HAL_RCC_OscConfig+0x4f4>)
 8001f02:	f043 0301 	orr.w	r3, r3, #1
 8001f06:	6213      	str	r3, [r2, #32]
 8001f08:	e00b      	b.n	8001f22 <HAL_RCC_OscConfig+0x36e>
 8001f0a:	4b67      	ldr	r3, [pc, #412]	; (80020a8 <HAL_RCC_OscConfig+0x4f4>)
 8001f0c:	6a1b      	ldr	r3, [r3, #32]
 8001f0e:	4a66      	ldr	r2, [pc, #408]	; (80020a8 <HAL_RCC_OscConfig+0x4f4>)
 8001f10:	f023 0301 	bic.w	r3, r3, #1
 8001f14:	6213      	str	r3, [r2, #32]
 8001f16:	4b64      	ldr	r3, [pc, #400]	; (80020a8 <HAL_RCC_OscConfig+0x4f4>)
 8001f18:	6a1b      	ldr	r3, [r3, #32]
 8001f1a:	4a63      	ldr	r2, [pc, #396]	; (80020a8 <HAL_RCC_OscConfig+0x4f4>)
 8001f1c:	f023 0304 	bic.w	r3, r3, #4
 8001f20:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d015      	beq.n	8001f56 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f2a:	f7ff fb69 	bl	8001600 <HAL_GetTick>
 8001f2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f30:	e00a      	b.n	8001f48 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f32:	f7ff fb65 	bl	8001600 <HAL_GetTick>
 8001f36:	4602      	mov	r2, r0
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d901      	bls.n	8001f48 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	e0ab      	b.n	80020a0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f48:	4b57      	ldr	r3, [pc, #348]	; (80020a8 <HAL_RCC_OscConfig+0x4f4>)
 8001f4a:	6a1b      	ldr	r3, [r3, #32]
 8001f4c:	f003 0302 	and.w	r3, r3, #2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d0ee      	beq.n	8001f32 <HAL_RCC_OscConfig+0x37e>
 8001f54:	e014      	b.n	8001f80 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f56:	f7ff fb53 	bl	8001600 <HAL_GetTick>
 8001f5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f5c:	e00a      	b.n	8001f74 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f5e:	f7ff fb4f 	bl	8001600 <HAL_GetTick>
 8001f62:	4602      	mov	r2, r0
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d901      	bls.n	8001f74 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e095      	b.n	80020a0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f74:	4b4c      	ldr	r3, [pc, #304]	; (80020a8 <HAL_RCC_OscConfig+0x4f4>)
 8001f76:	6a1b      	ldr	r3, [r3, #32]
 8001f78:	f003 0302 	and.w	r3, r3, #2
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d1ee      	bne.n	8001f5e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f80:	7dfb      	ldrb	r3, [r7, #23]
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d105      	bne.n	8001f92 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f86:	4b48      	ldr	r3, [pc, #288]	; (80020a8 <HAL_RCC_OscConfig+0x4f4>)
 8001f88:	69db      	ldr	r3, [r3, #28]
 8001f8a:	4a47      	ldr	r2, [pc, #284]	; (80020a8 <HAL_RCC_OscConfig+0x4f4>)
 8001f8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f90:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	69db      	ldr	r3, [r3, #28]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	f000 8081 	beq.w	800209e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f9c:	4b42      	ldr	r3, [pc, #264]	; (80020a8 <HAL_RCC_OscConfig+0x4f4>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f003 030c 	and.w	r3, r3, #12
 8001fa4:	2b08      	cmp	r3, #8
 8001fa6:	d061      	beq.n	800206c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	69db      	ldr	r3, [r3, #28]
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d146      	bne.n	800203e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fb0:	4b3f      	ldr	r3, [pc, #252]	; (80020b0 <HAL_RCC_OscConfig+0x4fc>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb6:	f7ff fb23 	bl	8001600 <HAL_GetTick>
 8001fba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fbc:	e008      	b.n	8001fd0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fbe:	f7ff fb1f 	bl	8001600 <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d901      	bls.n	8001fd0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	e067      	b.n	80020a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fd0:	4b35      	ldr	r3, [pc, #212]	; (80020a8 <HAL_RCC_OscConfig+0x4f4>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d1f0      	bne.n	8001fbe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6a1b      	ldr	r3, [r3, #32]
 8001fe0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fe4:	d108      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001fe6:	4b30      	ldr	r3, [pc, #192]	; (80020a8 <HAL_RCC_OscConfig+0x4f4>)
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	492d      	ldr	r1, [pc, #180]	; (80020a8 <HAL_RCC_OscConfig+0x4f4>)
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ff8:	4b2b      	ldr	r3, [pc, #172]	; (80020a8 <HAL_RCC_OscConfig+0x4f4>)
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6a19      	ldr	r1, [r3, #32]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002008:	430b      	orrs	r3, r1
 800200a:	4927      	ldr	r1, [pc, #156]	; (80020a8 <HAL_RCC_OscConfig+0x4f4>)
 800200c:	4313      	orrs	r3, r2
 800200e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002010:	4b27      	ldr	r3, [pc, #156]	; (80020b0 <HAL_RCC_OscConfig+0x4fc>)
 8002012:	2201      	movs	r2, #1
 8002014:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002016:	f7ff faf3 	bl	8001600 <HAL_GetTick>
 800201a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800201c:	e008      	b.n	8002030 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800201e:	f7ff faef 	bl	8001600 <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	2b02      	cmp	r3, #2
 800202a:	d901      	bls.n	8002030 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	e037      	b.n	80020a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002030:	4b1d      	ldr	r3, [pc, #116]	; (80020a8 <HAL_RCC_OscConfig+0x4f4>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d0f0      	beq.n	800201e <HAL_RCC_OscConfig+0x46a>
 800203c:	e02f      	b.n	800209e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800203e:	4b1c      	ldr	r3, [pc, #112]	; (80020b0 <HAL_RCC_OscConfig+0x4fc>)
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002044:	f7ff fadc 	bl	8001600 <HAL_GetTick>
 8002048:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800204a:	e008      	b.n	800205e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800204c:	f7ff fad8 	bl	8001600 <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b02      	cmp	r3, #2
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e020      	b.n	80020a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800205e:	4b12      	ldr	r3, [pc, #72]	; (80020a8 <HAL_RCC_OscConfig+0x4f4>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d1f0      	bne.n	800204c <HAL_RCC_OscConfig+0x498>
 800206a:	e018      	b.n	800209e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	69db      	ldr	r3, [r3, #28]
 8002070:	2b01      	cmp	r3, #1
 8002072:	d101      	bne.n	8002078 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e013      	b.n	80020a0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002078:	4b0b      	ldr	r3, [pc, #44]	; (80020a8 <HAL_RCC_OscConfig+0x4f4>)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6a1b      	ldr	r3, [r3, #32]
 8002088:	429a      	cmp	r2, r3
 800208a:	d106      	bne.n	800209a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002096:	429a      	cmp	r2, r3
 8002098:	d001      	beq.n	800209e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e000      	b.n	80020a0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800209e:	2300      	movs	r3, #0
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3718      	adds	r7, #24
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	40021000 	.word	0x40021000
 80020ac:	40007000 	.word	0x40007000
 80020b0:	42420060 	.word	0x42420060

080020b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d101      	bne.n	80020c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e0d0      	b.n	800226a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020c8:	4b6a      	ldr	r3, [pc, #424]	; (8002274 <HAL_RCC_ClockConfig+0x1c0>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0307 	and.w	r3, r3, #7
 80020d0:	683a      	ldr	r2, [r7, #0]
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d910      	bls.n	80020f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020d6:	4b67      	ldr	r3, [pc, #412]	; (8002274 <HAL_RCC_ClockConfig+0x1c0>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f023 0207 	bic.w	r2, r3, #7
 80020de:	4965      	ldr	r1, [pc, #404]	; (8002274 <HAL_RCC_ClockConfig+0x1c0>)
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020e6:	4b63      	ldr	r3, [pc, #396]	; (8002274 <HAL_RCC_ClockConfig+0x1c0>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0307 	and.w	r3, r3, #7
 80020ee:	683a      	ldr	r2, [r7, #0]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d001      	beq.n	80020f8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e0b8      	b.n	800226a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0302 	and.w	r3, r3, #2
 8002100:	2b00      	cmp	r3, #0
 8002102:	d020      	beq.n	8002146 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0304 	and.w	r3, r3, #4
 800210c:	2b00      	cmp	r3, #0
 800210e:	d005      	beq.n	800211c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002110:	4b59      	ldr	r3, [pc, #356]	; (8002278 <HAL_RCC_ClockConfig+0x1c4>)
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	4a58      	ldr	r2, [pc, #352]	; (8002278 <HAL_RCC_ClockConfig+0x1c4>)
 8002116:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800211a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0308 	and.w	r3, r3, #8
 8002124:	2b00      	cmp	r3, #0
 8002126:	d005      	beq.n	8002134 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002128:	4b53      	ldr	r3, [pc, #332]	; (8002278 <HAL_RCC_ClockConfig+0x1c4>)
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	4a52      	ldr	r2, [pc, #328]	; (8002278 <HAL_RCC_ClockConfig+0x1c4>)
 800212e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002132:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002134:	4b50      	ldr	r3, [pc, #320]	; (8002278 <HAL_RCC_ClockConfig+0x1c4>)
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	494d      	ldr	r1, [pc, #308]	; (8002278 <HAL_RCC_ClockConfig+0x1c4>)
 8002142:	4313      	orrs	r3, r2
 8002144:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0301 	and.w	r3, r3, #1
 800214e:	2b00      	cmp	r3, #0
 8002150:	d040      	beq.n	80021d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	2b01      	cmp	r3, #1
 8002158:	d107      	bne.n	800216a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800215a:	4b47      	ldr	r3, [pc, #284]	; (8002278 <HAL_RCC_ClockConfig+0x1c4>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d115      	bne.n	8002192 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e07f      	b.n	800226a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	2b02      	cmp	r3, #2
 8002170:	d107      	bne.n	8002182 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002172:	4b41      	ldr	r3, [pc, #260]	; (8002278 <HAL_RCC_ClockConfig+0x1c4>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d109      	bne.n	8002192 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e073      	b.n	800226a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002182:	4b3d      	ldr	r3, [pc, #244]	; (8002278 <HAL_RCC_ClockConfig+0x1c4>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0302 	and.w	r3, r3, #2
 800218a:	2b00      	cmp	r3, #0
 800218c:	d101      	bne.n	8002192 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e06b      	b.n	800226a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002192:	4b39      	ldr	r3, [pc, #228]	; (8002278 <HAL_RCC_ClockConfig+0x1c4>)
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f023 0203 	bic.w	r2, r3, #3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	4936      	ldr	r1, [pc, #216]	; (8002278 <HAL_RCC_ClockConfig+0x1c4>)
 80021a0:	4313      	orrs	r3, r2
 80021a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021a4:	f7ff fa2c 	bl	8001600 <HAL_GetTick>
 80021a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021aa:	e00a      	b.n	80021c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021ac:	f7ff fa28 	bl	8001600 <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e053      	b.n	800226a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021c2:	4b2d      	ldr	r3, [pc, #180]	; (8002278 <HAL_RCC_ClockConfig+0x1c4>)
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f003 020c 	and.w	r2, r3, #12
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d1eb      	bne.n	80021ac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021d4:	4b27      	ldr	r3, [pc, #156]	; (8002274 <HAL_RCC_ClockConfig+0x1c0>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0307 	and.w	r3, r3, #7
 80021dc:	683a      	ldr	r2, [r7, #0]
 80021de:	429a      	cmp	r2, r3
 80021e0:	d210      	bcs.n	8002204 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021e2:	4b24      	ldr	r3, [pc, #144]	; (8002274 <HAL_RCC_ClockConfig+0x1c0>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f023 0207 	bic.w	r2, r3, #7
 80021ea:	4922      	ldr	r1, [pc, #136]	; (8002274 <HAL_RCC_ClockConfig+0x1c0>)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021f2:	4b20      	ldr	r3, [pc, #128]	; (8002274 <HAL_RCC_ClockConfig+0x1c0>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0307 	and.w	r3, r3, #7
 80021fa:	683a      	ldr	r2, [r7, #0]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d001      	beq.n	8002204 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e032      	b.n	800226a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0304 	and.w	r3, r3, #4
 800220c:	2b00      	cmp	r3, #0
 800220e:	d008      	beq.n	8002222 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002210:	4b19      	ldr	r3, [pc, #100]	; (8002278 <HAL_RCC_ClockConfig+0x1c4>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	4916      	ldr	r1, [pc, #88]	; (8002278 <HAL_RCC_ClockConfig+0x1c4>)
 800221e:	4313      	orrs	r3, r2
 8002220:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0308 	and.w	r3, r3, #8
 800222a:	2b00      	cmp	r3, #0
 800222c:	d009      	beq.n	8002242 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800222e:	4b12      	ldr	r3, [pc, #72]	; (8002278 <HAL_RCC_ClockConfig+0x1c4>)
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	691b      	ldr	r3, [r3, #16]
 800223a:	00db      	lsls	r3, r3, #3
 800223c:	490e      	ldr	r1, [pc, #56]	; (8002278 <HAL_RCC_ClockConfig+0x1c4>)
 800223e:	4313      	orrs	r3, r2
 8002240:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002242:	f000 f821 	bl	8002288 <HAL_RCC_GetSysClockFreq>
 8002246:	4602      	mov	r2, r0
 8002248:	4b0b      	ldr	r3, [pc, #44]	; (8002278 <HAL_RCC_ClockConfig+0x1c4>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	091b      	lsrs	r3, r3, #4
 800224e:	f003 030f 	and.w	r3, r3, #15
 8002252:	490a      	ldr	r1, [pc, #40]	; (800227c <HAL_RCC_ClockConfig+0x1c8>)
 8002254:	5ccb      	ldrb	r3, [r1, r3]
 8002256:	fa22 f303 	lsr.w	r3, r2, r3
 800225a:	4a09      	ldr	r2, [pc, #36]	; (8002280 <HAL_RCC_ClockConfig+0x1cc>)
 800225c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800225e:	4b09      	ldr	r3, [pc, #36]	; (8002284 <HAL_RCC_ClockConfig+0x1d0>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4618      	mov	r0, r3
 8002264:	f7ff f98a 	bl	800157c <HAL_InitTick>

  return HAL_OK;
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	3710      	adds	r7, #16
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	40022000 	.word	0x40022000
 8002278:	40021000 	.word	0x40021000
 800227c:	08002bcc 	.word	0x08002bcc
 8002280:	20000044 	.word	0x20000044
 8002284:	20000048 	.word	0x20000048

08002288 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002288:	b490      	push	{r4, r7}
 800228a:	b08a      	sub	sp, #40	; 0x28
 800228c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800228e:	4b2a      	ldr	r3, [pc, #168]	; (8002338 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002290:	1d3c      	adds	r4, r7, #4
 8002292:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002294:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002298:	f240 2301 	movw	r3, #513	; 0x201
 800229c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800229e:	2300      	movs	r3, #0
 80022a0:	61fb      	str	r3, [r7, #28]
 80022a2:	2300      	movs	r3, #0
 80022a4:	61bb      	str	r3, [r7, #24]
 80022a6:	2300      	movs	r3, #0
 80022a8:	627b      	str	r3, [r7, #36]	; 0x24
 80022aa:	2300      	movs	r3, #0
 80022ac:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80022ae:	2300      	movs	r3, #0
 80022b0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80022b2:	4b22      	ldr	r3, [pc, #136]	; (800233c <HAL_RCC_GetSysClockFreq+0xb4>)
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	f003 030c 	and.w	r3, r3, #12
 80022be:	2b04      	cmp	r3, #4
 80022c0:	d002      	beq.n	80022c8 <HAL_RCC_GetSysClockFreq+0x40>
 80022c2:	2b08      	cmp	r3, #8
 80022c4:	d003      	beq.n	80022ce <HAL_RCC_GetSysClockFreq+0x46>
 80022c6:	e02d      	b.n	8002324 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022c8:	4b1d      	ldr	r3, [pc, #116]	; (8002340 <HAL_RCC_GetSysClockFreq+0xb8>)
 80022ca:	623b      	str	r3, [r7, #32]
      break;
 80022cc:	e02d      	b.n	800232a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	0c9b      	lsrs	r3, r3, #18
 80022d2:	f003 030f 	and.w	r3, r3, #15
 80022d6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80022da:	4413      	add	r3, r2
 80022dc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80022e0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d013      	beq.n	8002314 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80022ec:	4b13      	ldr	r3, [pc, #76]	; (800233c <HAL_RCC_GetSysClockFreq+0xb4>)
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	0c5b      	lsrs	r3, r3, #17
 80022f2:	f003 0301 	and.w	r3, r3, #1
 80022f6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80022fa:	4413      	add	r3, r2
 80022fc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002300:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	4a0e      	ldr	r2, [pc, #56]	; (8002340 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002306:	fb02 f203 	mul.w	r2, r2, r3
 800230a:	69bb      	ldr	r3, [r7, #24]
 800230c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002310:	627b      	str	r3, [r7, #36]	; 0x24
 8002312:	e004      	b.n	800231e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	4a0b      	ldr	r2, [pc, #44]	; (8002344 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002318:	fb02 f303 	mul.w	r3, r2, r3
 800231c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800231e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002320:	623b      	str	r3, [r7, #32]
      break;
 8002322:	e002      	b.n	800232a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002324:	4b06      	ldr	r3, [pc, #24]	; (8002340 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002326:	623b      	str	r3, [r7, #32]
      break;
 8002328:	bf00      	nop
    }
  }
  return sysclockfreq;
 800232a:	6a3b      	ldr	r3, [r7, #32]
}
 800232c:	4618      	mov	r0, r3
 800232e:	3728      	adds	r7, #40	; 0x28
 8002330:	46bd      	mov	sp, r7
 8002332:	bc90      	pop	{r4, r7}
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	08002bbc 	.word	0x08002bbc
 800233c:	40021000 	.word	0x40021000
 8002340:	007a1200 	.word	0x007a1200
 8002344:	003d0900 	.word	0x003d0900

08002348 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002348:	b480      	push	{r7}
 800234a:	b085      	sub	sp, #20
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002350:	4b0a      	ldr	r3, [pc, #40]	; (800237c <RCC_Delay+0x34>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a0a      	ldr	r2, [pc, #40]	; (8002380 <RCC_Delay+0x38>)
 8002356:	fba2 2303 	umull	r2, r3, r2, r3
 800235a:	0a5b      	lsrs	r3, r3, #9
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	fb02 f303 	mul.w	r3, r2, r3
 8002362:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002364:	bf00      	nop
  }
  while (Delay --);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	1e5a      	subs	r2, r3, #1
 800236a:	60fa      	str	r2, [r7, #12]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d1f9      	bne.n	8002364 <RCC_Delay+0x1c>
}
 8002370:	bf00      	nop
 8002372:	bf00      	nop
 8002374:	3714      	adds	r7, #20
 8002376:	46bd      	mov	sp, r7
 8002378:	bc80      	pop	{r7}
 800237a:	4770      	bx	lr
 800237c:	20000044 	.word	0x20000044
 8002380:	10624dd3 	.word	0x10624dd3

08002384 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d101      	bne.n	8002396 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e041      	b.n	800241a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800239c:	b2db      	uxtb	r3, r3
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d106      	bne.n	80023b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2200      	movs	r2, #0
 80023a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f7ff f84e 	bl	800144c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2202      	movs	r2, #2
 80023b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	3304      	adds	r3, #4
 80023c0:	4619      	mov	r1, r3
 80023c2:	4610      	mov	r0, r2
 80023c4:	f000 fa6a 	bl	800289c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2201      	movs	r2, #1
 80023cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2201      	movs	r2, #1
 80023d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2201      	movs	r2, #1
 80023dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2201      	movs	r2, #1
 80023e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2201      	movs	r2, #1
 80023ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2201      	movs	r2, #1
 80023fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2201      	movs	r2, #1
 800240c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2201      	movs	r2, #1
 8002414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	3708      	adds	r7, #8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
	...

08002424 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002424:	b480      	push	{r7}
 8002426:	b085      	sub	sp, #20
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002432:	b2db      	uxtb	r3, r3
 8002434:	2b01      	cmp	r3, #1
 8002436:	d001      	beq.n	800243c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e035      	b.n	80024a8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2202      	movs	r2, #2
 8002440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	68da      	ldr	r2, [r3, #12]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f042 0201 	orr.w	r2, r2, #1
 8002452:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a16      	ldr	r2, [pc, #88]	; (80024b4 <HAL_TIM_Base_Start_IT+0x90>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d009      	beq.n	8002472 <HAL_TIM_Base_Start_IT+0x4e>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002466:	d004      	beq.n	8002472 <HAL_TIM_Base_Start_IT+0x4e>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a12      	ldr	r2, [pc, #72]	; (80024b8 <HAL_TIM_Base_Start_IT+0x94>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d111      	bne.n	8002496 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f003 0307 	and.w	r3, r3, #7
 800247c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2b06      	cmp	r3, #6
 8002482:	d010      	beq.n	80024a6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f042 0201 	orr.w	r2, r2, #1
 8002492:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002494:	e007      	b.n	80024a6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f042 0201 	orr.w	r2, r2, #1
 80024a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80024a6:	2300      	movs	r3, #0
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3714      	adds	r7, #20
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bc80      	pop	{r7}
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	40012c00 	.word	0x40012c00
 80024b8:	40000400 	.word	0x40000400

080024bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	691b      	ldr	r3, [r3, #16]
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d122      	bne.n	8002518 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	f003 0302 	and.w	r3, r3, #2
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d11b      	bne.n	8002518 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f06f 0202 	mvn.w	r2, #2
 80024e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2201      	movs	r2, #1
 80024ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	699b      	ldr	r3, [r3, #24]
 80024f6:	f003 0303 	and.w	r3, r3, #3
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d003      	beq.n	8002506 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f000 f9b1 	bl	8002866 <HAL_TIM_IC_CaptureCallback>
 8002504:	e005      	b.n	8002512 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f000 f9a4 	bl	8002854 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f000 f9b3 	bl	8002878 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	f003 0304 	and.w	r3, r3, #4
 8002522:	2b04      	cmp	r3, #4
 8002524:	d122      	bne.n	800256c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	f003 0304 	and.w	r3, r3, #4
 8002530:	2b04      	cmp	r3, #4
 8002532:	d11b      	bne.n	800256c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f06f 0204 	mvn.w	r2, #4
 800253c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2202      	movs	r2, #2
 8002542:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	699b      	ldr	r3, [r3, #24]
 800254a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800254e:	2b00      	cmp	r3, #0
 8002550:	d003      	beq.n	800255a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f000 f987 	bl	8002866 <HAL_TIM_IC_CaptureCallback>
 8002558:	e005      	b.n	8002566 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f000 f97a 	bl	8002854 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f000 f989 	bl	8002878 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	f003 0308 	and.w	r3, r3, #8
 8002576:	2b08      	cmp	r3, #8
 8002578:	d122      	bne.n	80025c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	f003 0308 	and.w	r3, r3, #8
 8002584:	2b08      	cmp	r3, #8
 8002586:	d11b      	bne.n	80025c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f06f 0208 	mvn.w	r2, #8
 8002590:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2204      	movs	r2, #4
 8002596:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	69db      	ldr	r3, [r3, #28]
 800259e:	f003 0303 	and.w	r3, r3, #3
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d003      	beq.n	80025ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f000 f95d 	bl	8002866 <HAL_TIM_IC_CaptureCallback>
 80025ac:	e005      	b.n	80025ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f000 f950 	bl	8002854 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f000 f95f 	bl	8002878 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	691b      	ldr	r3, [r3, #16]
 80025c6:	f003 0310 	and.w	r3, r3, #16
 80025ca:	2b10      	cmp	r3, #16
 80025cc:	d122      	bne.n	8002614 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	f003 0310 	and.w	r3, r3, #16
 80025d8:	2b10      	cmp	r3, #16
 80025da:	d11b      	bne.n	8002614 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f06f 0210 	mvn.w	r2, #16
 80025e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2208      	movs	r2, #8
 80025ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	69db      	ldr	r3, [r3, #28]
 80025f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d003      	beq.n	8002602 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f000 f933 	bl	8002866 <HAL_TIM_IC_CaptureCallback>
 8002600:	e005      	b.n	800260e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f000 f926 	bl	8002854 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f000 f935 	bl	8002878 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	2b01      	cmp	r3, #1
 8002620:	d10e      	bne.n	8002640 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	f003 0301 	and.w	r3, r3, #1
 800262c:	2b01      	cmp	r3, #1
 800262e:	d107      	bne.n	8002640 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f06f 0201 	mvn.w	r2, #1
 8002638:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f7fe fe6c 	bl	8001318 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	691b      	ldr	r3, [r3, #16]
 8002646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800264a:	2b80      	cmp	r3, #128	; 0x80
 800264c:	d10e      	bne.n	800266c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002658:	2b80      	cmp	r3, #128	; 0x80
 800265a:	d107      	bne.n	800266c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002664:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f000 fa67 	bl	8002b3a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002676:	2b40      	cmp	r3, #64	; 0x40
 8002678:	d10e      	bne.n	8002698 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002684:	2b40      	cmp	r3, #64	; 0x40
 8002686:	d107      	bne.n	8002698 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002690:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f000 f8f9 	bl	800288a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	691b      	ldr	r3, [r3, #16]
 800269e:	f003 0320 	and.w	r3, r3, #32
 80026a2:	2b20      	cmp	r3, #32
 80026a4:	d10e      	bne.n	80026c4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	f003 0320 	and.w	r3, r3, #32
 80026b0:	2b20      	cmp	r3, #32
 80026b2:	d107      	bne.n	80026c4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f06f 0220 	mvn.w	r2, #32
 80026bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f000 fa32 	bl	8002b28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80026c4:	bf00      	nop
 80026c6:	3708      	adds	r7, #8
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}

080026cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d101      	bne.n	80026e4 <HAL_TIM_ConfigClockSource+0x18>
 80026e0:	2302      	movs	r3, #2
 80026e2:	e0b3      	b.n	800284c <HAL_TIM_ConfigClockSource+0x180>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2201      	movs	r2, #1
 80026e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2202      	movs	r2, #2
 80026f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002702:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800270a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	68fa      	ldr	r2, [r7, #12]
 8002712:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800271c:	d03e      	beq.n	800279c <HAL_TIM_ConfigClockSource+0xd0>
 800271e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002722:	f200 8087 	bhi.w	8002834 <HAL_TIM_ConfigClockSource+0x168>
 8002726:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800272a:	f000 8085 	beq.w	8002838 <HAL_TIM_ConfigClockSource+0x16c>
 800272e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002732:	d87f      	bhi.n	8002834 <HAL_TIM_ConfigClockSource+0x168>
 8002734:	2b70      	cmp	r3, #112	; 0x70
 8002736:	d01a      	beq.n	800276e <HAL_TIM_ConfigClockSource+0xa2>
 8002738:	2b70      	cmp	r3, #112	; 0x70
 800273a:	d87b      	bhi.n	8002834 <HAL_TIM_ConfigClockSource+0x168>
 800273c:	2b60      	cmp	r3, #96	; 0x60
 800273e:	d050      	beq.n	80027e2 <HAL_TIM_ConfigClockSource+0x116>
 8002740:	2b60      	cmp	r3, #96	; 0x60
 8002742:	d877      	bhi.n	8002834 <HAL_TIM_ConfigClockSource+0x168>
 8002744:	2b50      	cmp	r3, #80	; 0x50
 8002746:	d03c      	beq.n	80027c2 <HAL_TIM_ConfigClockSource+0xf6>
 8002748:	2b50      	cmp	r3, #80	; 0x50
 800274a:	d873      	bhi.n	8002834 <HAL_TIM_ConfigClockSource+0x168>
 800274c:	2b40      	cmp	r3, #64	; 0x40
 800274e:	d058      	beq.n	8002802 <HAL_TIM_ConfigClockSource+0x136>
 8002750:	2b40      	cmp	r3, #64	; 0x40
 8002752:	d86f      	bhi.n	8002834 <HAL_TIM_ConfigClockSource+0x168>
 8002754:	2b30      	cmp	r3, #48	; 0x30
 8002756:	d064      	beq.n	8002822 <HAL_TIM_ConfigClockSource+0x156>
 8002758:	2b30      	cmp	r3, #48	; 0x30
 800275a:	d86b      	bhi.n	8002834 <HAL_TIM_ConfigClockSource+0x168>
 800275c:	2b20      	cmp	r3, #32
 800275e:	d060      	beq.n	8002822 <HAL_TIM_ConfigClockSource+0x156>
 8002760:	2b20      	cmp	r3, #32
 8002762:	d867      	bhi.n	8002834 <HAL_TIM_ConfigClockSource+0x168>
 8002764:	2b00      	cmp	r3, #0
 8002766:	d05c      	beq.n	8002822 <HAL_TIM_ConfigClockSource+0x156>
 8002768:	2b10      	cmp	r3, #16
 800276a:	d05a      	beq.n	8002822 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800276c:	e062      	b.n	8002834 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6818      	ldr	r0, [r3, #0]
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	6899      	ldr	r1, [r3, #8]
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	685a      	ldr	r2, [r3, #4]
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	f000 f95c 	bl	8002a3a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002790:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	68fa      	ldr	r2, [r7, #12]
 8002798:	609a      	str	r2, [r3, #8]
      break;
 800279a:	e04e      	b.n	800283a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6818      	ldr	r0, [r3, #0]
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	6899      	ldr	r1, [r3, #8]
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685a      	ldr	r2, [r3, #4]
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	f000 f945 	bl	8002a3a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	689a      	ldr	r2, [r3, #8]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80027be:	609a      	str	r2, [r3, #8]
      break;
 80027c0:	e03b      	b.n	800283a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6818      	ldr	r0, [r3, #0]
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	6859      	ldr	r1, [r3, #4]
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	461a      	mov	r2, r3
 80027d0:	f000 f8bc 	bl	800294c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2150      	movs	r1, #80	; 0x50
 80027da:	4618      	mov	r0, r3
 80027dc:	f000 f913 	bl	8002a06 <TIM_ITRx_SetConfig>
      break;
 80027e0:	e02b      	b.n	800283a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6818      	ldr	r0, [r3, #0]
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	6859      	ldr	r1, [r3, #4]
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	461a      	mov	r2, r3
 80027f0:	f000 f8da 	bl	80029a8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2160      	movs	r1, #96	; 0x60
 80027fa:	4618      	mov	r0, r3
 80027fc:	f000 f903 	bl	8002a06 <TIM_ITRx_SetConfig>
      break;
 8002800:	e01b      	b.n	800283a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6818      	ldr	r0, [r3, #0]
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	6859      	ldr	r1, [r3, #4]
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	461a      	mov	r2, r3
 8002810:	f000 f89c 	bl	800294c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2140      	movs	r1, #64	; 0x40
 800281a:	4618      	mov	r0, r3
 800281c:	f000 f8f3 	bl	8002a06 <TIM_ITRx_SetConfig>
      break;
 8002820:	e00b      	b.n	800283a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4619      	mov	r1, r3
 800282c:	4610      	mov	r0, r2
 800282e:	f000 f8ea 	bl	8002a06 <TIM_ITRx_SetConfig>
        break;
 8002832:	e002      	b.n	800283a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002834:	bf00      	nop
 8002836:	e000      	b.n	800283a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002838:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2201      	movs	r2, #1
 800283e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800284a:	2300      	movs	r3, #0
}
 800284c:	4618      	mov	r0, r3
 800284e:	3710      	adds	r7, #16
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}

08002854 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800285c:	bf00      	nop
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	bc80      	pop	{r7}
 8002864:	4770      	bx	lr

08002866 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002866:	b480      	push	{r7}
 8002868:	b083      	sub	sp, #12
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800286e:	bf00      	nop
 8002870:	370c      	adds	r7, #12
 8002872:	46bd      	mov	sp, r7
 8002874:	bc80      	pop	{r7}
 8002876:	4770      	bx	lr

08002878 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002880:	bf00      	nop
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	bc80      	pop	{r7}
 8002888:	4770      	bx	lr

0800288a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800288a:	b480      	push	{r7}
 800288c:	b083      	sub	sp, #12
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002892:	bf00      	nop
 8002894:	370c      	adds	r7, #12
 8002896:	46bd      	mov	sp, r7
 8002898:	bc80      	pop	{r7}
 800289a:	4770      	bx	lr

0800289c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800289c:	b480      	push	{r7}
 800289e:	b085      	sub	sp, #20
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	4a25      	ldr	r2, [pc, #148]	; (8002944 <TIM_Base_SetConfig+0xa8>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d007      	beq.n	80028c4 <TIM_Base_SetConfig+0x28>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028ba:	d003      	beq.n	80028c4 <TIM_Base_SetConfig+0x28>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	4a22      	ldr	r2, [pc, #136]	; (8002948 <TIM_Base_SetConfig+0xac>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d108      	bne.n	80028d6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	68fa      	ldr	r2, [r7, #12]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a1a      	ldr	r2, [pc, #104]	; (8002944 <TIM_Base_SetConfig+0xa8>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d007      	beq.n	80028ee <TIM_Base_SetConfig+0x52>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028e4:	d003      	beq.n	80028ee <TIM_Base_SetConfig+0x52>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a17      	ldr	r2, [pc, #92]	; (8002948 <TIM_Base_SetConfig+0xac>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d108      	bne.n	8002900 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	68fa      	ldr	r2, [r7, #12]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	695b      	ldr	r3, [r3, #20]
 800290a:	4313      	orrs	r3, r2
 800290c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	68fa      	ldr	r2, [r7, #12]
 8002912:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	689a      	ldr	r2, [r3, #8]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	4a07      	ldr	r2, [pc, #28]	; (8002944 <TIM_Base_SetConfig+0xa8>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d103      	bne.n	8002934 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	691a      	ldr	r2, [r3, #16]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	615a      	str	r2, [r3, #20]
}
 800293a:	bf00      	nop
 800293c:	3714      	adds	r7, #20
 800293e:	46bd      	mov	sp, r7
 8002940:	bc80      	pop	{r7}
 8002942:	4770      	bx	lr
 8002944:	40012c00 	.word	0x40012c00
 8002948:	40000400 	.word	0x40000400

0800294c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800294c:	b480      	push	{r7}
 800294e:	b087      	sub	sp, #28
 8002950:	af00      	add	r7, sp, #0
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	60b9      	str	r1, [r7, #8]
 8002956:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6a1b      	ldr	r3, [r3, #32]
 800295c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	6a1b      	ldr	r3, [r3, #32]
 8002962:	f023 0201 	bic.w	r2, r3, #1
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	699b      	ldr	r3, [r3, #24]
 800296e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002976:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	011b      	lsls	r3, r3, #4
 800297c:	693a      	ldr	r2, [r7, #16]
 800297e:	4313      	orrs	r3, r2
 8002980:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	f023 030a 	bic.w	r3, r3, #10
 8002988:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800298a:	697a      	ldr	r2, [r7, #20]
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	4313      	orrs	r3, r2
 8002990:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	693a      	ldr	r2, [r7, #16]
 8002996:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	697a      	ldr	r2, [r7, #20]
 800299c:	621a      	str	r2, [r3, #32]
}
 800299e:	bf00      	nop
 80029a0:	371c      	adds	r7, #28
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bc80      	pop	{r7}
 80029a6:	4770      	bx	lr

080029a8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b087      	sub	sp, #28
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6a1b      	ldr	r3, [r3, #32]
 80029b8:	f023 0210 	bic.w	r2, r3, #16
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	699b      	ldr	r3, [r3, #24]
 80029c4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	6a1b      	ldr	r3, [r3, #32]
 80029ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80029d2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	031b      	lsls	r3, r3, #12
 80029d8:	697a      	ldr	r2, [r7, #20]
 80029da:	4313      	orrs	r3, r2
 80029dc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80029e4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	011b      	lsls	r3, r3, #4
 80029ea:	693a      	ldr	r2, [r7, #16]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	697a      	ldr	r2, [r7, #20]
 80029f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	693a      	ldr	r2, [r7, #16]
 80029fa:	621a      	str	r2, [r3, #32]
}
 80029fc:	bf00      	nop
 80029fe:	371c      	adds	r7, #28
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bc80      	pop	{r7}
 8002a04:	4770      	bx	lr

08002a06 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a06:	b480      	push	{r7}
 8002a08:	b085      	sub	sp, #20
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
 8002a0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a1e:	683a      	ldr	r2, [r7, #0]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	f043 0307 	orr.w	r3, r3, #7
 8002a28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	68fa      	ldr	r2, [r7, #12]
 8002a2e:	609a      	str	r2, [r3, #8]
}
 8002a30:	bf00      	nop
 8002a32:	3714      	adds	r7, #20
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bc80      	pop	{r7}
 8002a38:	4770      	bx	lr

08002a3a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a3a:	b480      	push	{r7}
 8002a3c:	b087      	sub	sp, #28
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	60f8      	str	r0, [r7, #12]
 8002a42:	60b9      	str	r1, [r7, #8]
 8002a44:	607a      	str	r2, [r7, #4]
 8002a46:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a54:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	021a      	lsls	r2, r3, #8
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	431a      	orrs	r2, r3
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	697a      	ldr	r2, [r7, #20]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	697a      	ldr	r2, [r7, #20]
 8002a6c:	609a      	str	r2, [r3, #8]
}
 8002a6e:	bf00      	nop
 8002a70:	371c      	adds	r7, #28
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bc80      	pop	{r7}
 8002a76:	4770      	bx	lr

08002a78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b085      	sub	sp, #20
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d101      	bne.n	8002a90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a8c:	2302      	movs	r3, #2
 8002a8e:	e041      	b.n	8002b14 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2202      	movs	r2, #2
 8002a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ab6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	68fa      	ldr	r2, [r7, #12]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	68fa      	ldr	r2, [r7, #12]
 8002ac8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a14      	ldr	r2, [pc, #80]	; (8002b20 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d009      	beq.n	8002ae8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002adc:	d004      	beq.n	8002ae8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a10      	ldr	r2, [pc, #64]	; (8002b24 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d10c      	bne.n	8002b02 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002aee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	68ba      	ldr	r2, [r7, #8]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	68ba      	ldr	r2, [r7, #8]
 8002b00:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2201      	movs	r2, #1
 8002b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b12:	2300      	movs	r3, #0
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3714      	adds	r7, #20
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bc80      	pop	{r7}
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	40012c00 	.word	0x40012c00
 8002b24:	40000400 	.word	0x40000400

08002b28 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b30:	bf00      	nop
 8002b32:	370c      	adds	r7, #12
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bc80      	pop	{r7}
 8002b38:	4770      	bx	lr

08002b3a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b3a:	b480      	push	{r7}
 8002b3c:	b083      	sub	sp, #12
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b42:	bf00      	nop
 8002b44:	370c      	adds	r7, #12
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bc80      	pop	{r7}
 8002b4a:	4770      	bx	lr

08002b4c <__libc_init_array>:
 8002b4c:	b570      	push	{r4, r5, r6, lr}
 8002b4e:	2600      	movs	r6, #0
 8002b50:	4d0c      	ldr	r5, [pc, #48]	; (8002b84 <__libc_init_array+0x38>)
 8002b52:	4c0d      	ldr	r4, [pc, #52]	; (8002b88 <__libc_init_array+0x3c>)
 8002b54:	1b64      	subs	r4, r4, r5
 8002b56:	10a4      	asrs	r4, r4, #2
 8002b58:	42a6      	cmp	r6, r4
 8002b5a:	d109      	bne.n	8002b70 <__libc_init_array+0x24>
 8002b5c:	f000 f822 	bl	8002ba4 <_init>
 8002b60:	2600      	movs	r6, #0
 8002b62:	4d0a      	ldr	r5, [pc, #40]	; (8002b8c <__libc_init_array+0x40>)
 8002b64:	4c0a      	ldr	r4, [pc, #40]	; (8002b90 <__libc_init_array+0x44>)
 8002b66:	1b64      	subs	r4, r4, r5
 8002b68:	10a4      	asrs	r4, r4, #2
 8002b6a:	42a6      	cmp	r6, r4
 8002b6c:	d105      	bne.n	8002b7a <__libc_init_array+0x2e>
 8002b6e:	bd70      	pop	{r4, r5, r6, pc}
 8002b70:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b74:	4798      	blx	r3
 8002b76:	3601      	adds	r6, #1
 8002b78:	e7ee      	b.n	8002b58 <__libc_init_array+0xc>
 8002b7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b7e:	4798      	blx	r3
 8002b80:	3601      	adds	r6, #1
 8002b82:	e7f2      	b.n	8002b6a <__libc_init_array+0x1e>
 8002b84:	08002bdc 	.word	0x08002bdc
 8002b88:	08002bdc 	.word	0x08002bdc
 8002b8c:	08002bdc 	.word	0x08002bdc
 8002b90:	08002be0 	.word	0x08002be0

08002b94 <memset>:
 8002b94:	4603      	mov	r3, r0
 8002b96:	4402      	add	r2, r0
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d100      	bne.n	8002b9e <memset+0xa>
 8002b9c:	4770      	bx	lr
 8002b9e:	f803 1b01 	strb.w	r1, [r3], #1
 8002ba2:	e7f9      	b.n	8002b98 <memset+0x4>

08002ba4 <_init>:
 8002ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ba6:	bf00      	nop
 8002ba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002baa:	bc08      	pop	{r3}
 8002bac:	469e      	mov	lr, r3
 8002bae:	4770      	bx	lr

08002bb0 <_fini>:
 8002bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bb2:	bf00      	nop
 8002bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bb6:	bc08      	pop	{r3}
 8002bb8:	469e      	mov	lr, r3
 8002bba:	4770      	bx	lr
